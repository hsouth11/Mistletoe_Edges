trees <- trees %>% mutate(across(
c(site_id, spp, status, hdm_pa, b_lc,
broom_pa, broom_pos, stem_pa, crown_class, crown_cond, outside_10, assessed_by, tree_type, dmr_f),
~as.factor(.)))
#Convert plot_id and dmrs to integers
trees <- trees %>% mutate(across(
c(plot_id, dmr_l, dmr_m, dmr_u, dmr), ~as.integer(.)))
str(trees)
#Read in climate data
#Data downloaded from ClimateBC (https://climatebc.ca/mapVersion, 24 Jun 2024). ClimateBCv7.50. Period: Normal_1991_2020
climate <- read_csv('./data/raw/hdm_climdata.csv') #raw data from climateBC
##Check coordinates were inputted correctly, then join site_ids
#Sites are identified by coordinates in the climate dataset. Check they are right before joining site_ids
site <- site %>% mutate(dd_X_r = round(dd_X, digits = 4), #round number of decimals to match climateBC rounding
dd_Y_r = round(dd_Y, digits = 5))
x <- site$dd_X_r - climate$long
y <- site$dd_Y_r - climate$Lat
print(x); print(y)
#Join site_id by latitude values
climate <- left_join(climate, select(site, site_id, dd_Y_r), by = c("Lat" = "dd_Y_r"))
#move site_id to the front
climate <- climate %>% select(site_id, everything())
#1 Growing degree days
climate <- climate %>% rowwise() %>% mutate(DD5_gs = sum(c_across(DD5_sp:DD5_at)))
select(climate, DD5, DD5_gs)
#2 Growing season radians
climate <- climate %>% rowwise() %>% mutate(Rad_gs = mean(c_across(Rad_sp:Rad_at)))
select(climate, MAR, Rad_gs)
#3 Lowest average minimum monthly temperature (Tmin_wt)
# find lowest Tmin value across all months
climate <- climate %>% rowwise() %>% mutate(Tmin_all = min(c_across(Tmin_01:Tmin_12)))
select(climate, Tmin_wt, Tmin_all)
#4 Standard deviation of lowest average minimum monthly temperature
# calculate the standard deviation in Tmin across all of the months
climate <- climate %>% rowwise() %>% mutate(Tmin_sd = sd(c_across(Tmin_01:Tmin_12)))
select(climate, Tmin_sd)
#5 Snow (PAS)
select(climate, MAP, PAS)
#6 Rain
climate <- climate %>% mutate(PAR = MAP-PAS)
select(climate, MAP, PAR, PAS)
#7 Lowest average spring monthly temperature
# Find lowest Tmin value between May and June
climate <- climate %>% rowwise() %>% mutate(Tmin_mj = min(c_across(Tmin_05:Tmin_06)))
select(climate, Tmin_mj)
#8 Lowest average fall monthly temperature (Tmin_at)
# Find the lowest Tmin value between August and September
climate <- climate %>% rowwise() %>% mutate(Tmin_as = min(c_across(Tmin_08:Tmin_09)))
select(climate, Tmin_as)
####Create clean dataset
#Pull out the variables described above
#Also include MAT (mean annual temperature), TD (temperature difference between mean coldest month temperature and mean warmest month temperature) and MAP (mean annual precipitation) because they are good descriptors
climate <- climate %>%
select(site_id, MAT, TD, MAP, PAR, PAS, DD5_gs, Rad_gs,
Tmin_all, Tmin_sd, Tmin_mj, Tmin_as) #select the varaibles of interest
View(climate)
print(climate)
climate <- read_csv('./data/raw/hdm_climdata.csv') #raw data from climateBC
####Check coordinates were inputted correctly, then join site_ids
#Sites are identified by coordinates in the climate dataset. Check they are right before joining site_ids
site <- site %>% mutate(dd_X_r = round(dd_X, digits = 4), #round number of decimals to match climateBC rounding
dd_Y_r = round(dd_Y, digits = 5))
x <- site$dd_X_r - climate$long
y <- site$dd_Y_r - climate$Lat
print(x); print(y)
#Good, almost al 0s, just one that is different by 1 x 10e-4 (a rounding error)
#Join site_id by latitude values
climate <- left_join(climate, select(site, site_id, dd_Y_r), by = c("Lat" = "dd_Y_r"))
#move site_id to the front
climate <- climate %>% select(site_id, everything())
#### Define climate variables that were in Bianca's paper
#Descriptions of these variables and whether they are exact matches or approximiations of variables used in paper are in: /Users/hannosoutham/Library/CloudStorage/OneDrive-UBC(1)/Msc/Thesis/ch1.docx
#1 Growing degree days
climate <- climate %>% rowwise() %>% mutate(DD5_gs = sum(c_across(DD5_sp:DD5_at)))
select(climate, DD5, DD5_gs)
#2 Growing season radians
climate <- climate %>% rowwise() %>% mutate(Rad_gs = mean(c_across(Rad_sp:Rad_at)))
select(climate, MAR, Rad_gs)
#3 Lowest average minimum monthly temperature (Tmin_wt)
# find lowest Tmin value across all months
climate <- climate %>% rowwise() %>% mutate(Tmin_all = min(c_across(Tmin_01:Tmin_12)))
select(climate, Tmin_wt, Tmin_all)
#4 Standard deviation of lowest average minimum monthly temperature
# calculate the standard deviation in Tmin across all of the months
climate <- climate %>% rowwise() %>% mutate(Tmin_sd = sd(c_across(Tmin_01:Tmin_12)))
select(climate, Tmin_sd)
#5 Snow (PAS)
select(climate, MAP, PAS)
#6 Rain
climate <- climate %>% mutate(PAR = MAP-PAS)
select(climate, MAP, PAR, PAS)
#7 Lowest average spring monthly temperature
# Find lowest Tmin value between May and June
climate <- climate %>% rowwise() %>% mutate(Tmin_mj = min(c_across(Tmin_05:Tmin_06)))
select(climate, Tmin_mj)
#8 Lowest average fall monthly temperature (Tmin_at)
# Find the lowest Tmin value between August and September
climate <- climate %>% rowwise() %>% mutate(Tmin_as = min(c_across(Tmin_08:Tmin_09)))
select(climate, Tmin_as)
####Create clean dataset
#Pull out the variables described above
#Also include MAT (mean annual temperature), TD (temperature difference between mean coldest month temperature and mean warmest month temperature) and MAP (mean annual precipitation) because they are good descriptors
climate <- climate %>%
select(site_id, bec, MAT, TD, MAP, PAR, PAS, DD5_gs, Rad_gs,
Tmin_all, Tmin_sd, Tmin_mj, Tmin_as) #select the varaibles of interest
climate <- read_csv('./data/raw/hdm_climdata.csv') #raw data from climateBC
####Check coordinates were inputted correctly, then join site_ids
#Sites are identified by coordinates in the climate dataset. Check they are right before joining site_ids
site <- site %>% mutate(dd_X_r = round(dd_X, digits = 4), #round number of decimals to match climateBC rounding
dd_Y_r = round(dd_Y, digits = 5))
x <- site$dd_X_r - climate$long
y <- site$dd_Y_r - climate$Lat
print(x); print(y)
#Good, almost al 0s, just one that is different by 1 x 10e-4 (a rounding error)
#Join site_id by latitude values
climate <- left_join(climate, select(site, site_id, bec, dd_Y_r), by = c("Lat" = "dd_Y_r"))
#move site_id to the front
climate <- climate %>% select(site_id, bec, everything())
#### Define climate variables that were in Bianca's paper
#Descriptions of these variables and whether they are exact matches or approximiations of variables used in paper are in: /Users/hannosoutham/Library/CloudStorage/OneDrive-UBC(1)/Msc/Thesis/ch1.docx
#1 Growing degree days
climate <- climate %>% rowwise() %>% mutate(DD5_gs = sum(c_across(DD5_sp:DD5_at)))
select(climate, DD5, DD5_gs)
#2 Growing season radians
climate <- climate %>% rowwise() %>% mutate(Rad_gs = mean(c_across(Rad_sp:Rad_at)))
select(climate, MAR, Rad_gs)
#3 Lowest average minimum monthly temperature (Tmin_wt)
# find lowest Tmin value across all months
climate <- climate %>% rowwise() %>% mutate(Tmin_all = min(c_across(Tmin_01:Tmin_12)))
select(climate, Tmin_wt, Tmin_all)
#4 Standard deviation of lowest average minimum monthly temperature
# calculate the standard deviation in Tmin across all of the months
climate <- climate %>% rowwise() %>% mutate(Tmin_sd = sd(c_across(Tmin_01:Tmin_12)))
select(climate, Tmin_sd)
#5 Snow (PAS)
select(climate, MAP, PAS)
#6 Rain
climate <- climate %>% mutate(PAR = MAP-PAS)
select(climate, MAP, PAR, PAS)
#7 Lowest average spring monthly temperature
# Find lowest Tmin value between May and June
climate <- climate %>% rowwise() %>% mutate(Tmin_mj = min(c_across(Tmin_05:Tmin_06)))
select(climate, Tmin_mj)
#8 Lowest average fall monthly temperature (Tmin_at)
# Find the lowest Tmin value between August and September
climate <- climate %>% rowwise() %>% mutate(Tmin_as = min(c_across(Tmin_08:Tmin_09)))
select(climate, Tmin_as)
####Create clean dataset
#Pull out the variables described above
#Also include MAT (mean annual temperature), TD (temperature difference between mean coldest month temperature and mean warmest month temperature) and MAP (mean annual precipitation) because they are good descriptors
climate <- climate %>%
select(site_id, bec, MAT, TD, MAP, PAR, PAS, DD5_gs, Rad_gs,
Tmin_all, Tmin_sd, Tmin_mj, Tmin_as) #select the varaibles of interest
print(climate)
#Export this as a table for thesis
write_csv(cliamte, "./tables/site_climate.csv")
#Export this as a table for thesis
write_csv(climate, "./tables/site_climate.csv")
####Graph this
clim_g <- climate %>%
pivot_longer(MAT:Tmin_as, names_to = "climvar", values_to = "climval")
####Graph this
#Create a long dataframe so a variables can be plotted in one go
clim_g <- climate %>%
pivot_longer(MAT:Tmin_as, names_to = "climvar", values_to = "climval")
#Create a plot
ggplot(climvars, aes(x=cluster, y=climval, label=site_id, color = bec)) +
geom_text_repel() +
geom_point() +
facet_wrap(~climvar, scales = "free_y") +
theme_classic()
#Create a plot
ggplot(clim_g, aes(x=cluster, y=climval, label=site_id, color = bec)) +
geom_text_repel() +
geom_point() +
facet_wrap(~climvar, scales = "free_y") +
theme_classic()
####Graph this
#Create a long dataframe so a variables can be plotted in one go
clim_g <- climate %>%
pivot_longer(MAT:Tmin_as, names_to = "climvar", values_to = "climval")
#Create a plot
ggplot(clim_g, aes(x=cluster, y=climval, label=site_id, color = bec)) +
geom_text_repel() +
geom_point() +
facet_wrap(~climvar, scales = "free_y") +
theme_classic()
climate <- read_csv('./data/raw/hdm_climdata.csv') #raw data from climateBC
####Check coordinates were inputted correctly, then join site_ids
#Sites are identified by coordinates in the climate dataset. Check they are right before joining site_ids
site <- site %>% mutate(dd_X_r = round(dd_X, digits = 4), #round number of decimals to match climateBC rounding
dd_Y_r = round(dd_Y, digits = 5))
x <- site$dd_X_r - climate$long
y <- site$dd_Y_r - climate$Lat
print(x); print(y)
#Good, almost al 0s, just one that is different by 1 x 10e-4 (a rounding error)
#Join site_id, bec and cluster by latitude values
climate <- left_join(climate, select(site, site_id, cluster, bec, dd_Y_r), by = c("Lat" = "dd_Y_r"))
#move site_id to the front
climate <- climate %>% select(site_id, cluster, bec,everything())
#### Define climate variables that were in Bianca's paper
#Descriptions of these variables and whether they are exact matches or approximiations of variables used in paper are in: /Users/hannosoutham/Library/CloudStorage/OneDrive-UBC(1)/Msc/Thesis/ch1.docx
#1 Growing degree days
climate <- climate %>% rowwise() %>% mutate(DD5_gs = sum(c_across(DD5_sp:DD5_at)))
select(climate, DD5, DD5_gs)
#2 Growing season radians
climate <- climate %>% rowwise() %>% mutate(Rad_gs = mean(c_across(Rad_sp:Rad_at)))
select(climate, MAR, Rad_gs)
#3 Lowest average minimum monthly temperature (Tmin_wt)
# find lowest Tmin value across all months
climate <- climate %>% rowwise() %>% mutate(Tmin_all = min(c_across(Tmin_01:Tmin_12)))
select(climate, Tmin_wt, Tmin_all)
#4 Standard deviation of lowest average minimum monthly temperature
# calculate the standard deviation in Tmin across all of the months
climate <- climate %>% rowwise() %>% mutate(Tmin_sd = sd(c_across(Tmin_01:Tmin_12)))
select(climate, Tmin_sd)
#5 Snow (PAS)
select(climate, MAP, PAS)
#6 Rain
climate <- climate %>% mutate(PAR = MAP-PAS)
select(climate, MAP, PAR, PAS)
#7 Lowest average spring monthly temperature
# Find lowest Tmin value between May and June
climate <- climate %>% rowwise() %>% mutate(Tmin_mj = min(c_across(Tmin_05:Tmin_06)))
select(climate, Tmin_mj)
#8 Lowest average fall monthly temperature (Tmin_at)
# Find the lowest Tmin value between August and September
climate <- climate %>% rowwise() %>% mutate(Tmin_as = min(c_across(Tmin_08:Tmin_09)))
select(climate, Tmin_as)
####Create clean dataset
#Pull out the variables described above
#Also include MAT (mean annual temperature), TD (temperature difference between mean coldest month temperature and mean warmest month temperature) and MAP (mean annual precipitation) because they are good descriptors
climate <- climate %>%
select(site_id, bec, MAT, TD, MAP, PAR, PAS, DD5_gs, Rad_gs,
Tmin_all, Tmin_sd, Tmin_mj, Tmin_as) #select the varaibles of interest
print(climate)
#Export this as a table for thesis
write_csv(climate, "./tables/site_climate.csv")
####Graph this
#Create a long dataframe so a variables can be plotted in one go
clim_g <- climate %>%
pivot_longer(MAT:Tmin_as, names_to = "climvar", values_to = "climval")
#Create a plot
ggplot(clim_g, aes(x=cluster, y=climval, label=site_id, color = bec)) +
geom_text_repel() +
geom_point() +
facet_wrap(~climvar, scales = "free_y") +
theme_classic()
print(climate)
####Read in climate data
#Data downloaded from ClimateBC (https://climatebc.ca/mapVersion, 24 Jun 2024). ClimateBCv7.50. Period: Normal_1991_2020
climate <- read_csv('./data/raw/hdm_climdata.csv') #raw data from climateBC
####Check coordinates were inputted correctly, then join site_ids
#Sites are identified by coordinates in the climate dataset. Check they are right before joining site_ids
site <- site %>% mutate(dd_X_r = round(dd_X, digits = 4), #round number of decimals to match climateBC rounding
dd_Y_r = round(dd_Y, digits = 5))
x <- site$dd_X_r - climate$long
y <- site$dd_Y_r - climate$Lat
#Join site_id, bec and cluster by latitude values
climate <- left_join(climate, select(site, site_id, cluster, bec, dd_Y_r), by = c("Lat" = "dd_Y_r"))
#move site_id to the front
climate <- climate %>% select(site_id, cluster, bec,everything())
#1 Growing degree days
climate <- climate %>% rowwise() %>% mutate(DD5_gs = sum(c_across(DD5_sp:DD5_at)))
select(climate, DD5, DD5_gs)
#2 Growing season radians
climate <- climate %>% rowwise() %>% mutate(Rad_gs = mean(c_across(Rad_sp:Rad_at)))
select(climate, MAR, Rad_gs)
#3 Lowest average minimum monthly temperature (Tmin_wt)
# find lowest Tmin value across all months
climate <- climate %>% rowwise() %>% mutate(Tmin_all = min(c_across(Tmin_01:Tmin_12)))
select(climate, Tmin_wt, Tmin_all)
#4 Standard deviation of lowest average minimum monthly temperature
# calculate the standard deviation in Tmin across all of the months
climate <- climate %>% rowwise() %>% mutate(Tmin_sd = sd(c_across(Tmin_01:Tmin_12)))
select(climate, Tmin_sd)
#5 Snow (PAS)
select(climate, MAP, PAS)
#6 Rain
climate <- climate %>% mutate(PAR = MAP-PAS)
select(climate, MAP, PAR, PAS)
#7 Lowest average spring monthly temperature
# Find lowest Tmin value between May and June
climate <- climate %>% rowwise() %>% mutate(Tmin_mj = min(c_across(Tmin_05:Tmin_06)))
select(climate, Tmin_mj)
#8 Lowest average fall monthly temperature (Tmin_at)
# Find the lowest Tmin value between August and September
climate <- climate %>% rowwise() %>% mutate(Tmin_as = min(c_across(Tmin_08:Tmin_09)))
select(climate, Tmin_as)
####Create clean dataset
#Pull out the variables described above
#Also include MAT (mean annual temperature), TD (temperature difference between mean coldest month temperature and mean warmest month temperature) and MAP (mean annual precipitation) because they are good descriptors
climate <- climate %>%
select(site_id, bec, MAT, TD, MAP, PAR, PAS, DD5_gs, Rad_gs,
Tmin_all, Tmin_sd, Tmin_mj, Tmin_as) #select the varaibles of interest
climate <- read_csv('./data/raw/hdm_climdata.csv') #raw data from climateBC
####Check coordinates were inputted correctly, then join site_ids
#Sites are identified by coordinates in the climate dataset. Check they are right before joining site_ids
site <- site %>% mutate(dd_X_r = round(dd_X, digits = 4), #round number of decimals to match climateBC rounding
dd_Y_r = round(dd_Y, digits = 5))
x <- site$dd_X_r - climate$long
y <- site$dd_Y_r - climate$Lat
print(x); print(y)
#Good, almost al 0s, just one that is different by 1 x 10e-4 (a rounding error)
#Join site_id, bec and cluster by latitude values
climate <- left_join(climate, select(site, site_id, cluster, bec, dd_Y_r), by = c("Lat" = "dd_Y_r"))
#move site_id to the front
climate <- climate %>% select(site_id, cluster, bec, everything())
#### Define climate variables that were in Bianca's paper
#Descriptions of these variables and whether they are exact matches or approximiations of variables used in paper are in: /Users/hannosoutham/Library/CloudStorage/OneDrive-UBC(1)/Msc/Thesis/ch1.docx
#1 Growing degree days
climate <- climate %>% rowwise() %>% mutate(DD5_gs = sum(c_across(DD5_sp:DD5_at)))
select(climate, DD5, DD5_gs)
#2 Growing season radians
climate <- climate %>% rowwise() %>% mutate(Rad_gs = mean(c_across(Rad_sp:Rad_at)))
select(climate, MAR, Rad_gs)
#3 Lowest average minimum monthly temperature (Tmin_wt)
# find lowest Tmin value across all months
climate <- climate %>% rowwise() %>% mutate(Tmin_all = min(c_across(Tmin_01:Tmin_12)))
select(climate, Tmin_wt, Tmin_all)
#4 Standard deviation of lowest average minimum monthly temperature
# calculate the standard deviation in Tmin across all of the months
climate <- climate %>% rowwise() %>% mutate(Tmin_sd = sd(c_across(Tmin_01:Tmin_12)))
select(climate, Tmin_sd)
#5 Snow (PAS)
select(climate, MAP, PAS)
#6 Rain
climate <- climate %>% mutate(PAR = MAP-PAS)
select(climate, MAP, PAR, PAS)
#7 Lowest average spring monthly temperature
# Find lowest Tmin value between May and June
climate <- climate %>% rowwise() %>% mutate(Tmin_mj = min(c_across(Tmin_05:Tmin_06)))
select(climate, Tmin_mj)
#8 Lowest average fall monthly temperature (Tmin_at)
# Find the lowest Tmin value between August and September
climate <- climate %>% rowwise() %>% mutate(Tmin_as = min(c_across(Tmin_08:Tmin_09)))
select(climate, Tmin_as)
####Create clean dataset
#Pull out the variables described above
#Also include MAT (mean annual temperature), TD (temperature difference between mean coldest month temperature and mean warmest month temperature) and MAP (mean annual precipitation) because they are good descriptors
climate <- climate %>%
select(site_id, cluster, bec, MAT, TD, MAP, PAR, PAS, DD5_gs, Rad_gs,
Tmin_all, Tmin_sd, Tmin_mj, Tmin_as) #select the varaibles of interest
print(climate)
#Export this as a table for thesis
write_csv(climate, "./tables/site_climate.csv")
####Graph this
#Create a long dataframe so a variables can be plotted in one go
clim_g <- climate %>%
pivot_longer(MAT:Tmin_as, names_to = "climvar", values_to = "climval")
#Create a plot
ggplot(clim_g, aes(x=cluster, y=climval, label=site_id, color = bec)) +
geom_text_repel() +
geom_point() +
facet_wrap(~climvar, scales = "free_y") +
theme_classic()
#Create a plot
ggplot(clim_g, aes(x=cluster, y=climval, label=site_id, color = bec)) +
geom_text_repel() +
geom_point() +
facet_wrap(~climvar, scales = "free_y") +
theme_classic() + theme(axis.text.x = element_text(angle = 90, hjust = 1)) +  # Rotate x-axis labels
scale_x_discrete(labels = function(x) str_replace_all(x, " ", "\n"))
#Create a plot
ggplot(clim_g, aes(x=cluster, y=climval, label=site_id, color = bec)) +
geom_text_repel() +
geom_point() +
facet_wrap(~climvar, scales = "free_y") +
theme_classic() + theme(axis.text.x = element_text(angle = 90, hjust = 0)) +  # Rotate x-axis labels
scale_x_discrete(labels = function(x) str_replace_all(x, " ", "\n"))
#Create a plot
ggplot(clim_g, aes(x=cluster, y=climval, label=site_id, color = bec)) +
geom_text_repel() +
geom_point() +
facet_wrap(~climvar, scales = "free_y") +
theme_classic() + theme(axis.text.x = element_text(angle = 90, hjust = 1)) +  # Rotate x-axis labels
scale_x_discrete(labels = function(x) str_replace_all(x, " ", "\n"))
#Create a plot
ggplot(clim_g, aes(x=cluster, y=climval, label=site_id, color = bec)) +
geom_text_repel() +
geom_point() +
facet_wrap(~climvar, scales = "free_y") +
theme_classic() + theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = -1)) +  # Rotate x-axis labels
scale_x_discrete(labels = function(x) str_replace_all(x, " ", "\n"))
#Create a plot
ggplot(clim_g, aes(x=cluster, y=climval, label=site_id, color = bec)) +
geom_text_repel() +
geom_point() +
facet_wrap(~climvar, scales = "free_y") +
theme_classic() + theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0)) +  # Rotate x-axis labels
scale_x_discrete(labels = function(x) str_replace_all(x, " ", "\n"))
#Create a plot
ggplot(clim_g, aes(x=cluster, y=climval, label=site_id, color = bec)) +
geom_text_repel() +
geom_point() +
facet_wrap(~climvar, scales = "free_y") +
theme_classic() + theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 1)) +  # Rotate x-axis labels
scale_x_discrete(labels = function(x) str_replace_all(x, " ", "\n"))
#Create a plot
ggplot(clim_g, aes(x=cluster, y=climval, label=site_id, color = bec)) +
geom_text_repel() +
geom_point() +
facet_wrap(~climvar, scales = "free_y") +
theme_classic() + theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.1)) +  # Rotate x-axis labels
scale_x_discrete(labels = function(x) str_replace_all(x, " ", "\n"))
#Create a plot
ggplot(clim_g, aes(x=cluster, y=climval, label=site_id, color = bec)) +
geom_text_repel() +
geom_point() +
facet_wrap(~climvar, scales = "free_y") +
theme_classic() + theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)) +  # Rotate x-axis labels
scale_x_discrete(labels = function(x) str_replace_all(x, " ", "\n"))
#Create a variale that combines site_id, bec, and regen age
site <- site %>% unite(col = id_bec_age_f, sep = ", ",
c("site_id", "bec_z_sz", "mature_Hw_age", "age"),
remove = FALSE) %>%
mutate(id_bec_ag_f = factor(id_bec_ag_f))
#Create a variale that combines site_id, bec, and regen age
site <- site %>% unite(col = id_bec_age_f, sep = ", ",
c("site_id", "bec", "age"),
remove = FALSE) %>%
mutate(id_bec_ag_f = factor(id_bec_ag_f))
#Create a variale that combines site_id, bec, and regen age
site <- site %>% unite(col = id_bec_age_f, sep = ", ",
c("site_id", "bec", "age", "yr_har"),
remove = FALSE) %>%
mutate(id_bec_ag_f = factor(id_bec_ag_f))
#Create a variale that combines site_id, bec, and regen age
site <- site %>% unite(col = id_bec_age_f, sep = ", ",
c("site_id", "bec", "yr_har"),
remove = FALSE) %>%
mutate(id_bec_ag_f = factor(id_bec_ag_f))
#Create a variale that combines site_id, bec, and regen age
site <- site %>% unite(col = id_bec_age_f, sep = ", ",
c("site_id", "bec", "yr_har"),
remove = FALSE) %>%
mutate(id_bec_ag_f = factor(id_bec_ag_f))
#Create a variale that combines site_id, bec, and regen age
site <- site %>% unite(col = id_bec_age_f, sep = ", ",
c("site_id", "bec", "yr_har"),
remove = FALSE) %>%
mutate(id_bec_age_f = factor(id_bec_ag_f))
#Create a variale that combines site_id, bec, and regen age
site <- site %>% unite(col = id_bec_age_f, sep = ", ",
c("site_id", "bec", "yr_har"),
remove = FALSE) %>%
mutate(id_bec_age_f = factor(id_bec_age_f))
##Dataset 2: tree data
#This contains data for each measured tree (mature and regen trees).
#Treats assessed_by var as a logical for some reason and throws up an error. Not a problem and not going to use this var
trees <- read_csv("data/workflow/trees_mapped.csv")
#Convert factor vars to factors:
trees <- trees %>% mutate(across(
c(site_id, spp, status, hdm_pa, b_lc,
broom_pa, broom_pos, stem_pa, crown_class, crown_cond, outside_10, assessed_by, tree_type, dmr_f),
~as.factor(.)))
#Convert plot_id and dmrs to integers
trees <- trees %>% mutate(across(
c(plot_id, dmr_l, dmr_m, dmr_u, dmr), ~as.integer(.)))
str(trees)
####Read in data and inspect it
##Dataset 1: site data.
#This contains variables at the site level. The key pieces for analysis are: year harvested and CWH subzone
site <- read_csv("data/cleaned/site data.csv")
##Create some variables to use in summary tables and figures
#Calculate approximate age of regen. Sites assessed in 2023 so age = 2023 - year harvested
site <- site %>% mutate(age = 2023-yr_har)
site$age #luckily, got pretty good spread
#Create a single variable from all the pieces of a BEC zone
site <- site %>% unite(col = bec, sep = "", c("bec_z", "bec_sz", "bec_var"), remove = FALSE)
#Create a variable that combines site_id, bec, and regen age
site <- site %>% unite(col = id_bec_age_f, sep = ", ",
c("site_id", "bec", "age"),
remove = FALSE) %>%
mutate(id_bec_age_f = factor(id_bec_age_f))
#Make cluster, bec and id_bec_age_f factors
site <- site %>% mutate(across(c(cluster, bec, id_bec_age_f), ~as.factor(.)))
str(site)
##Dataset 2: tree data
#This contains data for each measured tree (mature and regen trees).
#Treats assessed_by var as a logical for some reason and throws up an error. Not a problem and not going to use this var
trees <- read_csv("data/workflow/trees_mapped.csv")
#Convert factor vars to factors:
trees <- trees %>% mutate(across(
c(site_id, spp, status, hdm_pa, b_lc,
broom_pa, broom_pos, stem_pa, crown_class, crown_cond, outside_10, assessed_by, tree_type, dmr_f),
~as.factor(.)))
#Convert plot_id and dmrs to integers
trees <- trees %>% mutate(across(
c(plot_id, dmr_l, dmr_m, dmr_u, dmr), ~as.integer(.)))
str(trees)
trees <- trees %>% mutate(dmr_f2 = case_when((dmr_f =="1" | dmr_f=="2") ~ "1-2", (dmr_f =="3" | dmr_f=="4") ~ "3-4", (dmr_f =="5" |
dmr_f=="6") ~ "5-6", .default = dmr_f))
trees <- trees %>% mutate(dmr_f2 = factor(dmr_f2, levels = c("-", "DU", "0","IBLC", "1-2", "3-4", "5-6", "DI")))
summary(trees$dmr_f2)
#Join to tree data:
trees <- left_join(trees, select(site, cluster,
bec id_bec_ag_f, age, site_id), by="site_id")
#Join to tree data:
trees <- left_join(trees, select(site, cluster,
bec, id_bec_ag_f, age, site_id), by="site_id")
#Join to tree data:
trees <- left_join(trees, select(site, cluster,
bec, id_bec_age_f, age, site_id), by="site_id")
#spp colours Cw, Fd, Hw
colors_spp = c("firebrick", "burlywood4", "dodgerblue")
#hdm_pa colours. Didn't include a colour for non-Hw trees because not creating any plots with them and this variable here.
levels(trees$hdm_pa)
colors_hdm_pa <- c("dodgerblue", "grey", "goldenrod1")
#dmr_f2 colours. Didn't include a colour for non-Hw trees because not creating any plots with them and this variable here.
levels(trees$dmr_f2)
colors_dmr_f2 = c("dodgerblue4", "dodgerblue", "khaki1", "khaki3", "goldenrod1", "goldenrod3", "hotpink")
