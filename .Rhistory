usethis::create_github_token()
library(sf)
library(dplyr)
library(tidyverse)
# Read in plot coordinate dataframe (Trimble Locations)
plot_coords <- read_csv('./data/hdm_trimbpoints_2023.csv')
View(plot_coords)
head(plot_coords)
summary(plot_coords)
#Filter so they only include mature component stem mapping points.
plot_coords$pt_type <- as.factor(plot_coords$pt_type)
#Filter so they only include mature component stem mapping points.
plot_coords$pt_type <- as.factor(plot_coords$pt_type) #make point type a factor
levels(plot_coords$pt_type)
#Filter so they only include mature component stem mapping points.
plot_coords$pt_type <- as.factor(plot_coords$pt_type) #make point type a factor
levels(plot_coords$pt_type)
plot_coords$ID <- as.numeric(plot_coords$pt_id) #make point id a numeric
plot_coords <- plot_coords %>% filter(pt_type=="stem map") #filter to just mature stem mapping plots
#Remove all columns except for the point id and the coordinates
plot_coords <- plot_coords %>%
select(pt_id, lat_num, long_num)
View(plot_coords)
# Read in Stem Mapping Sheet with Distance/Az Measurements
stem_mapped_polar <- read_csv('./data/mature comp_master.csv')
#delete empty rows
stem_mapped_polar <- stem_mapped_polar %>% filter(!is.na(tree_id_old))
View(stem_mapped_polar)
#delete empty rows
stem_mapped_polar <- stem_mapped_polar %>% filter(!is.na(tree_id_new))
# Join relevant plot center coordinate with each tree
stem_mapped_polar <- inner_join(stem_mapped_polar, plot_coords, by = c("plot_id" = "pt_id"))
# Read in plot coordinate dataframe (Trimble Locations)
plot_coords <- read_csv('./data/hdm_trimbpoints_2023.csv')
#Filter so they only include mature component stem mapping points.
plot_coords$pt_type <- as.factor(plot_coords$pt_type) #make point type a factor
levels(plot_coords$pt_type)
plot_coords$pt_id <- as.numeric(plot_coords$pt_id) #make point id a numeric
plot_coords <- plot_coords %>% filter(pt_type=="stem map") #filter to just mature stem mapping plots
#Remove all columns except for the point id and the coordinates
plot_coords <- plot_coords %>%
select(pt_id, lat_num, long_num)
# Read in Stem Mapping Sheet with Distance/Az Measurements
stem_mapped_polar <- read_csv('./data/mature comp_master.csv')
# Delete empty rows
stem_mapped_polar <- stem_mapped_polar %>% filter(!is.na(tree_id_new))
# Join relevant plot center coordinate with each tree
stem_mapped_polar <- inner_join(stem_mapped_polar, plot_coords, by = c("plot_id" = "pt_id"))
View(stem_mapped_polar)
# Function to convert distance/azimuth to XY coordinates
polar_to_XY <- function(azimuth,
distance,
xcenter,
ycenter,
shape_file = TRUE,
crs) {
if((max(azimuth) - min(azimuth) < 2*pi) == TRUE){
print("WARNING: This function assumes azimuth is in degrees, please check")
}
angle = azimuth * pi/180
#Convert to radians
#angle = angle*pi/180
angle = 2*pi - (angle - pi/2)
x = xcenter + distance * cos(angle)
y = ycenter + distance * sin(angle)
#define output point locations
tree_locations <- data.frame(X = x, Y = y)
if(shape_file == T){# output a shape file of the tree locations
print(paste("creating spatial points layer from tree locations. CRS is:", crs))
tree_locations <- sf::st_as_sf(tree_locations, coords = c("X", 'Y'), crs = crs)
}
else{
tree_locations
}
return(tree_locations)
}
crs <- 4326
stem_mapped_XY <- stem_mapped_polar %>%
mutate(polar_to_XY(azimuth = az_deg, distance = dist_m,
xcenter = POINT_X, ycenter = POINT_Y, crs = crs,
shape_file = TRUE))
stem_mapped_XY <- stem_mapped_polar %>%
mutate(polar_to_XY(azimuth = az_deg, distance = dist_m,
xcenter = long_num, ycenter = lat_num, crs = crs,
shape_file = TRUE))
stem_mapped_pts <- st_as_sf(stem_mapped_XY)
?st_as_sf
ggplot(stem_mapped_pts, aes(color=spp)) + geom_sf()
mi_1 <- stem_mapped_pts %>% filter(site_id=="mi_1")
ggplot(mi_1, aes(color=spp)) + geom_sf()
View(stem_mapped_polar)
View(mi_1)
sp_transform()
library(sp)
spTransform()
?spTransform
?proj4string
# Read in plot coordinate dataframe (Trimble Locations)
plot_coords <- read_csv('./data/hdm_trimbpoints_2023.csv')
summary(plot_coords)
#Filter so they only include mature component stem mapping points.
plot_coords$pt_type <- as.factor(plot_coords$pt_type) #make point type a factor
levels(plot_coords$pt_type)
plot_coords$pt_id <- as.numeric(plot_coords$pt_id) #make point id a numeric
plot_coords <- plot_coords %>% filter(pt_type=="stem map") #filter to just mature stem mapping plots
#Remove all columns except for the point id and the coordinates
plot_coords <- plot_coords %>%
select(pt_id, lat_num, long_num)
# Read in Stem Mapping Sheet with Distance/Az Measurements
stem_mapped_polar <- read_csv('./data/mature comp_master.csv')
# Delete empty rows
stem_mapped_polar <- stem_mapped_polar %>% filter(!is.na(tree_id_new))
# Join relevant plot center coordinate with each tree
stem_mapped_polar <- inner_join(stem_mapped_polar, plot_coords, by = c("plot_id" = "pt_id"))
#Remove all columns except for the point id and the coordinates
plot_coords <- plot_coords %>%
select(pt_id, x_nad, y_nad)
# Read in plot coordinate dataframe (Trimble Locations)
plot_coords <- read_csv('./data/hdm_trimbpoints_2023.csv')
summary(plot_coords)
#Filter so they only include mature component stem mapping points.
plot_coords$pt_type <- as.factor(plot_coords$pt_type) #make point type a factor
levels(plot_coords$pt_type)
plot_coords$pt_id <- as.numeric(plot_coords$pt_id) #make point id a numeric
plot_coords <- plot_coords %>% filter(pt_type=="stem map") #filter to just mature stem mapping plots
#Remove all columns except for the point id and the coordinates
plot_coords <- plot_coords %>%
select(pt_id, x_nad, y_nad)
# Read in Stem Mapping Sheet with Distance/Az Measurements
stem_mapped_polar <- read_csv('./data/mature comp_master.csv')
# Delete empty rows
stem_mapped_polar <- stem_mapped_polar %>% filter(!is.na(tree_id_new))
# Join relevant plot center coordinate with each tree
stem_mapped_polar <- inner_join(stem_mapped_polar, plot_coords, by = c("plot_id" = "pt_id"))
# Function to convert distance/azimuth to XY coordinates
polar_to_XY <- function(azimuth,
distance,
xcenter,
ycenter,
shape_file = TRUE,
crs) {
if((max(azimuth) - min(azimuth) < 2*pi) == TRUE){
print("WARNING: This function assumes azimuth is in degrees, please check")
}
angle = azimuth * pi/180
#Convert to radians
#angle = angle*pi/180
angle = 2*pi - (angle - pi/2)
x = xcenter + distance * cos(angle)
y = ycenter + distance * sin(angle)
#define output point locations
tree_locations <- data.frame(X = x, Y = y)
if(shape_file == T){# output a shape file of the tree locations
print(paste("creating spatial points layer from tree locations. CRS is:", crs))
tree_locations <- sf::st_as_sf(tree_locations, coords = c("X", 'Y'), crs = crs)
}
else{
tree_locations
}
return(tree_locations)
}
crs <- 26910
stem_mapped_XY <- stem_mapped_polar %>%
mutate(polar_to_XY(azimuth = az_deg, distance = dist_m,
xcenter = x_nad, ycenter = y_nad, crs = crs,
shape_file = TRUE))
stem_mapped_pts <- st_as_sf(stem_mapped_XY)
mi_1 <- stem_mapped_pts %>% filter(site_id=="mi_1")
?st_as_sf
ggplot(mi_1, aes(color=spp)) + geom_sf()
ggplot(stem_mapped_pts, aes(color=spp)) + geom_sf() + facet_grid(~site_id)
ggplot(stem_mapped_pts, aes(color=spp)) + geom_sf() + facet_wrap(~site_id)
ggplot(stem_mapped_pts, aes(color=spp)) + geom_sf() + facet_wrap(~site_id, scales="free")
ggplot(mi_1, aes(color=spp)) + geom_sf()
