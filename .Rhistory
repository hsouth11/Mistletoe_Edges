#Start by inspecting the samples trees
#How many trees have an age estimate per site visit?
t_psp %>% group_by(CLSTR_ID) %>%
summarise(n_age_tr = sum(!is.na(AGE_TOT))) %>% summary(n_age_tr)
#Look at a number of age trees by crown class
t_psp %>% group_by(CR_CL) %>%
summarise(n_age_tr = sum(!is.na(AGE_TOT)))
#Make TH_TREE a factor
t_psp <- t_psp %>% mutate(TH_TREE = as.factor(TH_TREE))
#Get a count of the number of trees in each TH_TREE class
t_psp %>% group_by(TH_TREE) %>% summarise(n_sam_tree = n())
#How many top trees does every site visit have (should be one)
t_psp %>% group_by(CLSTR_ID) %>%
summarise(n_T_tree = sum(TH_TREE == "T", na.rm = T)) %>%
summary(n_T_tree)
#Some sites have as many as 10 top trees, weird
#Check how that all top trees are codominant/dominant
t_psp %>% group_by(CR_CL) %>%
summarise(n_T_tree = sum(TH_TREE == "T", na.rm = T))
#Filter to just the top trees
toptr_psp <- t_psp %>% filter(TH_TREE == "T") %>%
filter(CR_CL %in% c("C", "D"))
#Check that all top trees have age and site index values
toptr_psp <- toptr_psp %>% filter(!(is.na(SI_TREE)) &
!(is.na(AGE_TOT)))
#Look at how many site visits are represented in those:
length(unique(toptr_psp$CLSTR_ID)) #284 site visits
#Look at how much site index and age estimates vary per site visit
si_age_sum <- toptr_psp %>% group_by(CLSTR_ID) %>%
summarise(si_sd = sd(SI_TREE), si_min = min(SI_TREE),
si_max = max(SI_TREE), age_sd = sd(AGE_TOT),
age_min = min(AGE_TOT), age_max = max(AGE_TOT)) %>%
mutate(si_diff = si_max - si_min, age_diff = age_max-age_min)
si_age_sum %>% select(si_sd, si_diff, age_sd, age_diff) %>% summary()
#Proceed and assume we just won't pick these sites
#Take avergage of site_index and average of age for each site visit
si_age_psp <- toptr_psp %>% group_by(CLSTR_ID) %>%
summarise(age = mean(AGE_TOT), si = mean(SI_TREE))
#Remove site visits that don't have age and site index from the
#t_psp and s_psp datasets
t_psp <- t_psp %>% semi_join(si_age_psp, by = "CLSTR_ID")
s_psp <- s_psp %>% semi_join(t_psp, by = "SITE_IDENTIFIER")
#Add basal area variable in the three datasets
regen_15 <- regen_15 %>% mutate(ba_m2 = pi*((dbh/100)/2)^2)
mature_comp <- mature_comp %>% mutate(ba_m2 = pi*((dbh/100)/2)^2)
t_psp <- t_psp %>% mutate(ba_m2 = pi*((DBH/100)/2)^2)
#Add basal area variable in the three datasets
regen_15 <- regen_15 %>% mutate(ba_m2 = pi*((dbh/100)/2)^2)
#Calculate the PCA metrics for the hdm data sets
reg.dbhstat <- regen_15 %>% group_by(site_id) %>% summarise(
n_stem_ha = sum(PHF_TREE),
mean_hw_dbh = mean(dbh),
median_hw_dbh = median(dbh),
q25_hw_dbh = quantile(dbh, probs = .25),
q75_hw_dbh = quantile(dbh, probs = .75),
max_hw_dbh = max(dbh),
mean_hw_dbh = mean(dbh[spp == "Hw"]),
median_hw_dbh = median(dbh[spp == "Hw"]),
q25_hw_dbh = quantile(dbh[spp == "Hw"], probs = .25),
q75_hw_dbh = quantile(dbh[spp == "Hw"], probs = .75),
max_hw_dbh = max(dbh[spp == "Hw"]),
ba_m2_hw = sum(ba_m2[spp == "Hw"]*PHF_TREE[spp == "Hw"])
)
mat.dbhstat <- mature_comp %>% group_by(site_id) %>% summarise(
n_stem_ha = sum(PHF_TREE),
mean_hw_dbh = mean(dbh),
median_hw_dbh = median(dbh),
q25_hw_dbh = quantile(dbh, probs = .25),
q75_hw_dbh = quantile(dbh, probs = .75),
max_hw_dbh = max(dbh),
mean_hw_dbh = mean(dbh[spp == "Hw"]),
median_hw_dbh = median(dbh[spp == "Hw"]),
q25_hw_dbh = quantile(dbh[spp == "Hw"], probs = .25),
q75_hw_dbh = quantile(dbh[spp == "Hw"], probs = .75),
max_hw_dbh = max(dbh[spp == "Hw"]),
ba_m2_hw = sum(ba_m2[spp == "Hw"]*PHF_TREE[spp == "Hw"])
)
#Now do this for each psp site visit
psp.dbhstat <- t_psp %>% group_by(CLSTR_ID) %>% summarise(
n_stem_ha = sum(PHF_TREE),
mean_hw_dbh = mean(DBH),
median_hw_dbh = median(DBH),
q25_hw_dbh = quantile(DBH, probs = .25),
q75_hw_dbh = quantile(DBH, probs = .75),
max_hw_dbh = max(DBH),
mean_hw_dbh = mean(DBH[SPECIES == "HW"]),
median_hw_dbh = median(DBH[SPECIES == "HW"]),
q25_hw_dbh = quantile(DBH[SPECIES == "HW"], probs = .25),
q75_hw_dbh = quantile(DBH[SPECIES == "HW"], probs = .75),
max_hw_dbh = max(DBH[SPECIES == "HW"]),
ba_m2_hw = sum(ba_m2[SPECIES == "HW"]*PHF_TREE[SPECIES == "HW"])
)
#Rename columns in each dataframe so they can be combined
#Also add a column that identifies the dataset
reg.dbhstat <- reg.dbhstat %>%
mutate(site_type = "regen") %>%
unite(col = ID, sep = ", ", c("site_id", "site_type"), remove = FALSE)
mat.dbhstat <- mat.dbhstat  %>% mutate(site_type = "mature") %>%
mutate(site_type = "mature") %>%
unite(col = ID, sep = ", ", c("site_id", "site_type"), remove = FALSE)
psp.dbhstat <- psp.dbhstat %>% mutate(site_type = "psp") %>%
unite(col = ID, sep = ", ", c("CLSTR_ID", "site_type"), remove = FALSE) %>%
rename(site_id = CLSTR_ID)
#Create a single dataframe
pca.stat <- rbind(reg.dbhstat, mat.dbhstat, psp.dbhstat)
#Add age and site_index data
si_age_reg_hdm <- si_age_reg_hdm %>% mutate(site_type = "regen") %>%
unite(col = ID, sep = ", ", c("site_id", "site_type"))
si_age_mat_hdm <- si_age_mat_hdm %>% mutate(site_type = "mature") %>%
unite(col = ID, sep = ", ", c("site_id", "site_type"))
si_age_psp <- si_age_psp%>% mutate(site_type = "psp") %>%
unite(col = ID, sep = ", ", c("CLSTR_ID", "site_type"))
si_age <- rbind(si_age_reg_hdm, si_age_mat_hdm, si_age_psp)
pca.stat <- left_join(pca.stat, si_age, by = "ID")
View(pca.stat)
#Run a pca to explain variation in dbh stats and find similar sites
#Check for infinite values
sum(is.infinite(as.matrix(pca.stat)))
#Check for missing values
sum(is.na(as.matrix(pca.stat)))
#Remove NA values if there are any
pca.stat <- pca.stat %>% drop_na()
#Select only nuermic columns
pca.stat.numeric <- pca.stat %>% select_if(is.numeric)
#Run the pca
#prcomp() function uses singular value decomposition
#because scale. = TRUE, this is will produce a correlation biplot
pca.1 <- prcomp(pca.stat.numeric, scale. = TRUE)
#Inspect the pca object
pca.1$sdev #the Eigenvalues (=proportional to the percent of variation explained)
head(pca.1$x) #the actual scores for each site on the each axis
summary(pca.1) #summary of the percent of variation explained by each axis
#Create a scree plot = shows how much variation is explained by each axis
scree.data <- tibble(axis = as.integer(1:length(pca.1$sdev)),
ev = pca.1$sdev) %>%
mutate(var = ev^2) %>% mutate(tot_var = sum(var)) %>%
mutate(prop_ex = var/tot_var)
ggplot(scree.data, aes(x= axis, y=prop_ex)) + geom_col() +
geom_point(col="lightblue") +
geom_line(col="lightblue")
ggplot(scree.data, aes(x= axis, y=prop_ex)) + geom_col() +
geom_point(col="lightblue") +
geom_line(col="lightblue")
ggplot(scree.data, aes(x= axis, y=prop_ex)) + geom_col() +
geom_point(col="lightblue") +
geom_line(col="lightblue")
ggplot(scree.data, aes(x= axis, y=prop_ex)) + geom_col() +
geom_point(col="lightblue") +
geom_line(col="lightblue")
#Add the scores back to the initial dataframe
pca.stat <- pca.stat %>% bind_cols(pca.1$x)
#Plot the first two PCA axes. We will use these axes to select potential pairs of sites
colors <- c("mature" = "#FF0000",
"psp" = "#00FF0050",  # Green with 80% transparency
"regen" = "#0000FF")
ggplot(pca.stat, aes(x=PC1, y=PC2, color = site_type)) +
geom_point() + scale_color_manual(values = colors)
#Plot a covariance biplot to see which variables are driving each axes
#See Section 12.5 of Zuur et al (2007) for comparison of correlation
#vs distance biplot
ggbiplot(pca.1, scale = 1)
#Add bec zone to the pca.stat dataframe
pca.stat <- left_join(pca.stat, select(site, site_id, bec))
#Add bec zone to the pca.stat dataframe
v_psp <- v_psp %>% semi_join(t_psp) #filter visit dataframe to remaining sites
View(v_psp)
View(t_psp)
#Add bec variable from site level dataset
v_psp <- v_psp %>%
left_join(select(s_psp, SITE_IDENTIFIER, bec), by="SITE_IDENTIFIER")
View(v_psp)
#Create a dataframe that has bec info for both psp and hdm sites
v_psp <- v_psp %>% mutate(site_id = CLSTR_ID)
bec <- rbind(select(site, site_id, bec), select(v_psp, site_id, bec))
#Join this to the pca.stat dataframe
pca.stat <- left_join(pca.stat, bec, by = "site_id")
View(pca.stat)
pc.stat <- pca.stat %>% filter(-c("bec.x", "bec.y"))
rlang::last_trace()
pc.stat <- pca.stat %>% select(-c("bec.x", "bec.y"))
View(pca.stat)
pca.stat <- pca.stat %>% select(-c("bec.x", "bec.y"))
#Join this to the pca.stat dataframe
pca.stat <- left_join(pca.stat, bec, by = "site_id")
View(pc.stat)
#Plot the PCA plot again, this time colouring by bec
ggplot(pca.stat, aes(x=PC1, y=PC2, type = site_type, color = bec)) +
geom_point() + scale_color_manual(values = colors)
#Plot the PCA plot again, this time colouring by bec
ggplot(pca.stat, aes(x=PC1, y=PC2, type = site_type, color = bec)) +
geom_point()
#Plot the PCA plot again, this time colouring by bec
ggplot(pca.stat, aes(x=PC1, y=PC2, shape = site_type, color = bec)) +
geom_point()
#Plot the PCA plot again, this time with the shape representing bec
ggplot(pca.stat, aes(x=PC1, y=PC2, shape = bec, color = bec)) +
geom_point() + scale_color_manual(values = colors)
#Plot the PCA plot again, this time with the shape representing bec
ggplot(pca.stat, aes(x=PC1, y=PC2, shape = bec, color = site_type)) +
geom_point() + scale_color_manual(values = colors)
#Plot the first two PCA axes. We will use these axes to select potential pairs of sites
colors <- c("mature" = "#FF0000",
"psp" = "#00FF0070",  # Green with 80% transparency
"regen" = "#0000FF")
#Plot the PCA plot again, this time with the shape representing bec
ggplot(pca.stat, aes(x=PC1, y=PC2, shape = bec, color = site_type)) +
geom_point() + scale_color_manual(values = colors)
#Plot the PCA plot again, this time coloured by bec
ggplot(pca.stat, aes(x=PC1, y=PC2, shape = site_type, color = bec)) +
geom_point()
#Create a scree plot = shows how much variation is explained by each axis
scree.data <- tibble(axis = as.integer(1:length(pca.1$sdev)),
ev = pca.1$sdev) %>%
mutate(var = ev^2) %>% mutate(tot_var = sum(var)) %>%
mutate(prop_ex = var/tot_var)
View(scree.data)
#First, filter the pca.stat dataframe to just candidate psp sites
pca.sta.psp <- pca.stat %>% filter(site_type=="psp")
#First, filter the pca.stat dataframe to just candidate psp sites
pca.stat.psp <- pca.stat %>% filter(site_type=="psp")
#Split this dataframe by bec zone
pca.sta.psp <- pca.sta.psp %>% group_split(bec)
levels(pca.stat)
levels(pca.stat$bec)
pca.stat.psp[1]
pca.stat.psp <- pca.stat.psp %>% group_split(bec)
pca.stat.psp[1]
pca.stat.psp[1]$bec
pca.stat.psp[1] %>% filter(bec)
pca.stat.psp[1] %>% select(bec)
pca.stat.psp[1] %>% select(bec)
pca.stat.psp[1$bec] %>% select(bec)
pca.stat.psp$bec[1] %>% select(bec)
pca.stat.psp$bec[1]
1 <- pca.stat.psp[1]
one <- pca.stat.psp[1]
View(one)
one <- as.data.frame(pca.stat.psp[1])
pca.stat.psp[[1]]
pca.stat.psp[[1]] %>% select(bec)
#Split this dataframe by bec zone
#Gives list of dataframes in order of the bec factor
levels(pca.stat$bec) #Order of dataframes
#Rename the dataframes
names(pca.stat.psp) <- c(levels(pca.stat$bec))
#Calculate difference in PCA axis scores, weighted by the amount of variation
#they explain, for each site component
pca.stat.psp$`CWHdm-` <- pca.stat.psp$`CWHdm-` %>%
mutate(cr_1_sim = abs(PC1 - pca.stat$PC1[ID == "cr_1, regen"]) +
abs(PC2 - pca.stat$PC2[ID == "cr_1, regen"]))
#Calculate difference in PCA axis scores, weighted by the amount of variation
#they explain, for each site component
#Add variable representing the weight of each variable
pca.stat <- pca.stat %>% mutate(PC1_wt = scree.data$prop_ex[1,],
PC2_wt = scree.data$prop_ex[2,])
#Calculate difference in PCA axis scores, weighted by the amount of variation
#they explain, for each site component
#Add variable representing the weight of each variable
pca.stat <- pca.stat %>% mutate(PC1_wt = scree.data$prop_ex[1],
PC2_wt = scree.data$prop_ex[2,])
#Calculate difference in PCA axis scores, weighted by the amount of variation
#they explain, for each site component
#Add variable representing the weight of each variable
pca.stat <- pca.stat %>% mutate(PC1_wt = scree.data$prop_ex[1],
PC2_wt = scree.data$prop_ex[2])
View(pca.stat)
pca.stat <- pca.stat %>%
mutate(cr_1_sim = abs(PC1 - PC1[ID == "cr_1, regen"])*PC1_wt +
abs(PC2 - PC2[ID == "cr_1, regen"])*PC2_wt)
View(pca.stat)
cr1r_cand <- pca.stat %>% filter(bec == bec[ID == "cr_1, regen"])
cr1r_cand <- pca.stat %>% filter(bec == bec[ID == "cr_1, regen"]) %>%
arrange(cr_1_sim) %>%
slice_head(n=4)
View(cr1r_cand)
cr1r_cand <- pca.stat %>% filter(bec == bec[ID == "cr_1, regen"]) %>%
arrange(cr_1_sim) %>%
filter(ID == "cr_1, regen" | site_type =="psp") %>%
slice_head(n=4)
View(cr1r_cand)
#Create a single dataset of tree level dbh data from regen, mature and psp
#datasets
regen_15 <- regen_15 %>% mutate(site_type = "regen") %>%
unite(col = ID, sep = ", ", c("site_id", "site_type"), remove = FALSE)
mature_comp <- mature_comp %>% mutate(site_type = "mature") %>%
unite(col = ID, sep = ", ", c("site_id", "site_type"), remove = FALSE)
t_psp <- t_psp %>% mutate(site_type = "psp") %>%
unite(col = ID, sep = ", ", c("CLSTR_ID", "site_type"), remove = FALSE) %>%
rename(dbh = DBH)
dbh_all <- rbind(select(regen_15, ID, dbh, dbh_bin),
select(mature_comp, ID, dbh, dbh_bin),
select(t_psp, ID, dbh, dbh_bin))
#visualize cr1 candidate sites
dbh_all_sum <- dbh_all %>% group_by(ID, dbh_bin) %>%
summarise(n_trees_ha = n())
ggplot(filter(dbh_all_sum, ID %in% cr1r_cand$ID),
aes(x=dbh_bin, y=n_trees_ha)) +
geom_bar(position = "stack", stat = "identity") +
facet_wrap(~ID)
trees <- trees %>%
mutate(dbh_bin = cut(dbh, breaks = c(4, 10, 15, 20, 25, 30, 35, 40, 45,
50, 55, 60, 65, 70, 75, 80,
85, 90, 95, 100, 105, 110, 115, 120,
125, 130, 135, 140, 145, 150, 155,
160, 165, 170, 175, 180, 185, 190,
195, 200, 500),
include.lowest = TRUE))
#Create dataset thats comparable between sites. Need to do two things:
##At a few sites we mapped mature trees up to 15m from the edge, when the standard was 10m. Need to remove extra trees mapped outside 10m.
##Regen transects are variable length. Filter to just trees within 15m (the shortest transect) so that we are comparing the same transect footprint at each site
trees_comp <- trees %>% filter(outside_10 =="N" | is.na(outside_10)) %>%
filter(dist_y_h<=15 | is.na(dist_y_h))
#Subdivide data into mature and regen components
##Mature
mature_comp <- trees_comp %>% filter(tree_type=="mature") #mature trees
##Regen
regen_15 <- trees_comp %>% filter(tree_type == "regen") #regen trees
#Create factors to represent these trees on a per-hectare basis
#factor = 1/plot area (ha)
#regen = 0.0225ha (3 15x5m transects)
#mature = 0.055 (10x55m area)
regen_15 <- regen_15 %>% mutate(PHF_TREE = 1/0.0225)
mature_comp <- mature_comp %>% mutate(PHF_TREE = 1/0.055)
#Break DBH up into bins
t_psp <- t_psp %>%
mutate(dbh_bin = cut(DBH, breaks =
c(4, 10, 15, 20, 25, 30, 35, 40, 45,
50, 55, 60, 65, 70, 75, 80,
85, 90, 95, 100, 105, 110, 115, 120,
125, 130, 135, 140, 145, 150, 155,
160, 165, 170, 175, 180, 185, 190,
195, 200, 500),
include.lowest = TRUE))
#Break DBH up into bins
t_psp <- t_psp %>%
mutate(dbh_bin = cut(dbh, breaks =
c(4, 10, 15, 20, 25, 30, 35, 40, 45,
50, 55, 60, 65, 70, 75, 80,
85, 90, 95, 100, 105, 110, 115, 120,
125, 130, 135, 140, 145, 150, 155,
160, 165, 170, 175, 180, 185, 190,
195, 200, 500),
include.lowest = TRUE))
ggplot(filter(dbh_all_sum, ID %in% cr1r_cand$ID),
aes(x=dbh_bin, y=n_trees_ha)) +
geom_bar(position = "stack", stat = "identity") +
facet_wrap(~ID)
#Create a single dataset of tree level dbh data from regen, mature and psp
#datasets
regen_15 <- regen_15 %>% mutate(site_type = "regen") %>%
unite(col = ID, sep = ", ", c("site_id", "site_type"), remove = FALSE)
mature_comp <- mature_comp %>% mutate(site_type = "mature") %>%
unite(col = ID, sep = ", ", c("site_id", "site_type"), remove = FALSE)
t_psp <- t_psp %>% mutate(site_type = "psp") %>%
unite(col = ID, sep = ", ", c("CLSTR_ID", "site_type"), remove = FALSE) %>%
rename(dbh = DBH)
t_psp <- t_psp %>% mutate(site_type = "psp") %>%
unite(col = ID, sep = ", ", c("CLSTR_ID", "site_type"), remove = FALSE)
dbh_all <- rbind(select(regen_15, ID, dbh, dbh_bin),
select(mature_comp, ID, dbh, dbh_bin),
select(t_psp, ID, dbh, dbh_bin))
#visualize cr1 candidate sites
dbh_all_sum <- dbh_all %>% group_by(ID, dbh_bin) %>%
summarise(n_trees_ha = n())
ggplot(filter(dbh_all_sum, ID %in% cr1r_cand$ID),
aes(x=dbh_bin, y=n_trees_ha)) +
geom_bar(position = "stack", stat = "identity") +
facet_wrap(~ID)
#Try to automate this in a loop:
hdm_comp_ids <- pca.stat %>%
filter(site_type %in% c("regen", "mature")) %>%
pull(ID)
cand <- pca.stat %>% filter(bec == bec[ID == i]) %>%
arrange(i) %>%
filter(ID == i | site_type =="psp") %>%
slice_head(n=4)
View(pca.stat)
View(pca.stat)
results <- list()
for (i in hdm_comp_ids) {
pca.stat <- pca.stat %>%
mutate(!!i := abs(PC1 - PC1[ID == i])*PC1_wt +
abs(PC2 - PC2[ID == i])*PC2_wt)
cand <- pca.stat %>% filter(bec == bec[ID == i]) %>%
arrange(!!sym(i)) %>%
filter(ID == i | site_type =="psp") %>%
slice_head(n=4)
results[[i]] <- cand
}
combined_results <- bind_rows(results, .id = "ID")
View(combined_results)
View(pc.stat)
View(pca.stat)
#Combine the output into a single dataframe
candidate_sites <- bind_rows(results, .id = "ID")
?pivot_longer
View(candidate_sites)
#Get a sense of the range of PCA score differences - a first indicator of
#whether hdm sites are equally or unequally well matched with psp sites
candidate_sites <- candidate_sites %>%
pivot_longer(names_to = "sim_site", values_to = "pca_diff") %>%
filter(ID = sim_site)
#Get a sense of the range of PCA score differences - a first indicator of
#whether hdm sites are equally or unequally well matched with psp sites
candidate_sites <- candidate_sites %>%
pivot_longer(cols = cr_1, regen:ph_3, mature, names_to = "sim_site", values_to = "pca_diff") %>%
filter(ID = sim_site)
#Get a sense of the range of PCA score differences - a first indicator of
#whether hdm sites are equally or unequally well matched with psp sites
candidate_sites <- candidate_sites %>%
pivot_longer(cols = `cr_1, regen`:`ph_3, mature`, names_to = "sim_site", values_to = "pca_diff") %>%
filter(ID = sim_site)
#Get a sense of the range of PCA score differences - a first indicator of
#whether hdm sites are equally or unequally well matched with psp sites
candidate_sites <- candidate_sites %>%
pivot_longer(cols = `cr_1, regen`:`ph_3, mature`, names_to = "sim_site", values_to = "pca_diff") %>%
filter(ID == sim_site)
View(candidate_sites)
summary(candidate_sites$pca_diff)
ggplot(candidate_sites, aes(x=bec, y=pca_diff, colour = ID)) + geom_point()
ggplot(candidate_sites, aes(y=pca_diff, colour = ID)) +
geom_point()
ggplot(candidate_sites, aes(x=site_type, y=pca_diff, colour = ID)) +
geom_point() + facet_wrap(~bec)
ggplot(candidate_sites, aes(x=bec, y=pca_diff, colour = bec)) +
geom_point()
un_id <- unique(candidate_sites$ID)
ggplot(filter(dbh_all_sum, ID %in% un_id[1]),
aes(x=dbh_bin, y=n_trees_ha)) +
geom_bar(position = "stack", stat = "identity") +
facet_wrap(~ID)
ggplot(filter(dbh_all_sum, ID %in% candidate_sites$ID[1:4]),
aes(x=dbh_bin, y=n_trees_ha)) +
geom_bar(position = "stack", stat = "identity") +
facet_wrap(~ID)
ggplot(filter(dbh_all_sum, ID %in% candidate_sites$ID[1:4]),
aes(x=dbh_bin, y=n_trees_ha)) +
geom_bar(position = "stack", stat = "identity") +
facet_wrap(~ID)
View(dbh_all_sum)
#Combine the output into a single dataframe
candidate_sites <- bind_rows(results, .id = "hdm_site")
View(candidate_sites)
#Get a sense of the range of PCA score differences - a first indicator of
#whether hdm sites are equally or unequally well matched with psp sites
candidate_sites <- candidate_sites %>%
pivot_longer(cols = `cr_1, regen`:`ph_3, mature`, names_to = "sim_site",
values_to = "pca_diff") %>%
filter(ID == sim_site)
summary(candidate_sites$pca_diff)
ggplot(candidate_sites, aes(x=bec, y=pca_diff, colour = bec)) +
geom_point()
View(candidate_sites)
#Combine the output into a single dataframe
candidate_sites <- bind_rows(results, .id = "hdm_site")
#Get a sense of the range of PCA score differences - a first indicator of
#whether hdm sites are equally or unequally well matched with psp sites
candidate_sites <- candidate_sites %>%
pivot_longer(cols = `cr_1, regen`:`ph_3, mature`, names_to = "sim_site",
values_to = "pca_diff") %>%
filter(hdm_site == sim_site)
summary(candidate_sites$pca_diff)
ggplot(candidate_sites, aes(x=bec, y=pca_diff, colour = bec)) +
geom_point()
ggplot(filter(dbh_all_sum, ID %in% candidate_sites$ID[1:4]),
aes(x=dbh_bin, y=n_trees_ha)) +
geom_bar(position = "stack", stat = "identity") +
facet_wrap(~ID)
ggplot(filter(dbh_all_sum, ID %in% candidate_sites$ID[5:8]),
aes(x=dbh_bin, y=n_trees_ha)) +
geom_bar(position = "stack", stat = "identity") +
facet_wrap(~ID)
ggplot(filter(dbh_all_sum, ID %in% candidate_sites$ID[1:4]),
aes(x=dbh_bin, y=n_trees_ha)) +
geom_bar(position = "stack", stat = "identity") +
facet_wrap(~ID)
ggplot(filter(dbh_all_sum, ID %in% candidate_sites$ID[5:8]),
aes(x=dbh_bin, y=n_trees_ha)) +
geom_bar(position = "stack", stat = "identity") +
facet_wrap(~ID)
ggplot(filter(dbh_all_sum, ID %in% candidate_sites$ID[9:12]),
aes(x=dbh_bin, y=n_trees_ha)) +
geom_bar(position = "stack", stat = "identity") +
facet_wrap(~ID)
ggplot(filter(dbh_all_sum, ID %in% candidate_sites$ID[13:15]),
aes(x=dbh_bin, y=n_trees_ha)) +
geom_bar(position = "stack", stat = "identity") +
facet_wrap(~ID)
ggplot(filter(dbh_all_sum, ID %in% candidate_sites$ID[13:16]),
aes(x=dbh_bin, y=n_trees_ha)) +
geom_bar(position = "stack", stat = "identity") +
facet_wrap(~ID)
ggplot(filter(dbh_all_sum, ID %in% candidate_sites$ID[17:20]),
aes(x=dbh_bin, y=n_trees_ha)) +
geom_bar(position = "stack", stat = "identity") +
facet_wrap(~ID)
ggplot(filter(dbh_all_sum, ID %in% candidate_sites$ID[21:24]),
aes(x=dbh_bin, y=n_trees_ha)) +
geom_bar(position = "stack", stat = "identity") +
facet_wrap(~ID)
ggplot(filter(dbh_all_sum, ID %in% candidate_sites$ID[24:26]),
aes(x=dbh_bin, y=n_trees_ha)) +
geom_bar(position = "stack", stat = "identity") +
facet_wrap(~ID)
ggplot(filter(dbh_all_sum, ID %in% candidate_sites$ID[25:28]),
aes(x=dbh_bin, y=n_trees_ha)) +
geom_bar(position = "stack", stat = "identity") +
facet_wrap(~ID)
ggplot(filter(dbh_all_sum, ID %in% candidate_sites$ID[29:32]),
aes(x=dbh_bin, y=n_trees_ha)) +
geom_bar(position = "stack", stat = "identity") +
facet_wrap(~ID)
