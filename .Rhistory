write_csv(mat_infection. "./tables/mat_infection.csv")
#Export this for thesis
write_csv(mat_infection, "./tables/mat_infection.csv")
#Now graph infection and DMR across dbh distributions
##Break down basal area and # stems by site, presence/absece of hdm and diameter class
mat.hdmpa_dbh <- mat.hwba %>% group_by(id_bec_age_f, hdm_pa, dbh_bin) %>%
summarise(ba_m2 = sum(ba_m2), nstem = n()) %>% complete(dbh_bin, fill=list(ba_m2=0, nstem=0))
##Graph this across diameter classes
mat.hdmpa_dbh <- mat.hdmpa_dbh %>% filter(ba_m2>0) #Remove rows with 0 because R will plot all dbh intervals (up to 180cm)
ggplot(mat.hdmpa_dbh, aes(x=dbh_bin, y=nstem, fill=hdm_pa)) + geom_bar(position="stack", stat="identity") +
facet_wrap(vars(id_bec_age_f)) + scale_fill_manual(values = colors_dmr_f2)
ggplot(mat.hdmpa_dbh, aes(x=dbh_bin, y=ba_m2, fill=hdm_pa)) + geom_bar(position="stack", stat="identity") +
facet_wrap(vars(id_bec_age_f)) + scale_fill_manual(values = colors_dmr_f2)
##Do the same but by DMR
mat.dmr_dbh <- mat.hw %>% group_by(id_bec_age_f, dmr_f2, dbh_bin) %>%
summarise(ba_m2 = sum(ba_m2), nstem = n()) %>% complete(dbh_bin, fill=list(ba_m2=0, nstem=0))
##Graph this across diameter classes
mat.dmr_dbh <- mat.dmr_dbh %>% filter(ba_m2>0) #Remove rows with 0 because R will plot all dbh intervals (up to 180cm)
##Do the same but by DMR
mat.dmr_dbh <- mat.hwba %>% group_by(id_bec_age_f, dmr_f2, dbh_bin) %>%
summarise(ba_m2 = sum(ba_m2), nstem = n()) %>% complete(dbh_bin, fill=list(ba_m2=0, nstem=0))
##Graph this across diameter classes
mat.dmr_dbh <- mat.dmr_dbh %>% filter(ba_m2>0) #Remove rows with 0 because R will plot all dbh intervals (up to 180cm)
ggplot(mat.dmr_dbh, aes(x=dbh_bin, y=nstem, fill=dmr_f2)) + geom_bar(position="stack", stat="identity") +
facet_wrap(vars(id_bec_age_f)) + scale_fill_manual(values = colors_dmr_f2)
ggplot(mat.dmr_dbh, aes(x=dbh_bin, y=ba_m2, fill=dmr_f2)) + geom_bar(position="stack", stat="identity") +
facet_wrap(vars(id_bec_age_f)) + scale_fill_manual(values = colors_dmr_f2)
#Create dataset of just Hw regen trees (our species of interest)
reg.hw <- trees %>% filter(tree_type == "regen" & spp=="Hw") #Hemlock regen trees
#Calculate the infection perimeter at each site
##Use the 90th percentile to do this. This metric is: the distance from the edge below which 90% of the infected Hw trees occur, averaged across the three transects at a site
reg.infper <- reg.hw %>% filter(hdm_pa == "Y") %>% group_by(id_bec_age_f, plot_id) %>% summarise(reg.infper = quantile(dist_y_h, probs = 0.9))
View(reg.infper)
reg.infper <- reg.infper %>% group_by(id_bec_age_f) %>%
summarise(reg.infper_m = mean(regen.infper),
reg.infper_sd = sd(reg.infper))
reg.infper <- reg.infper %>% group_by(id_bec_age_f) %>%
summarise(reg.infper_m = mean(reg.infper),
reg.infper_sd = sd(reg.infper))
View(reg.infper)
#Calculate the infection perimeter at each site
##Use the 90th percentile to do this. This metric is: the distance from the edge below which 90% of the infected Hw trees occur, averaged across the three transects at a site
reg.infper <- reg.hw %>% filter(hdm_pa == "Y") %>% group_by(id_bec_age_f, plot_id) %>%
summarise(reg.infper = quantile(dist_y_h, probs = 0.9)) #get infection perimeter for each transect
#Calculate the infection perimeter at each site
##Use the 90th percentile to do this. This metric is: the distance from the edge below which 90% of the infected Hw trees occur, averaged across the three transects at a site
reg.infper <- reg.hw %>% filter(hdm_pa == "Y") %>% group_by(id_bec_age_f, plot_id) %>%
summarise(reg.infper = quantile(dist_y_h, probs = 0.9)) %>%
complete(reg.infper, fill=list(reg.infper=0)) #get infection perimeter for each transect
#Calculate the infection perimeter at each site
##Use the 90th percentile to do this. This metric is: the distance from the edge below which 90% of the infected Hw trees occur, averaged across the three transects at a site
reg.infper <- reg.hw %>% filter(hdm_pa == "Y") %>% group_by(id_bec_age_f, plot_id) %>%
summarise(reg.infper = quantile(dist_y_h, probs = 0.9)) %>%
complete(plot_id, fill=list(reg.infper=0)) #get infection perimeter for each transect
#Calculate the infection perimeter at each site
##Use the 90th percentile to do this. This metric is: the distance from the edge below which 90% of the infected Hw trees occur, averaged across the three transects at a site
reg.infper <- reg.hw %>% filter(hdm_pa == "Y") %>% group_by(id_bec_age_f, plot_id) %>%
summarise(reg.infper = quantile(dist_y_h, probs = 0.9)) %>%
complete(plot_id, fill=list(reg.infper=0)) #get infection perimeter for each transect
#Create dataset of just Hw regen trees (our species of interest)
reg.hw <- trees %>% filter(tree_type == "regen" & spp=="Hw") #Hemlock regen trees
#Calculate the infection perimeter at each site
##Use the 90th percentile to do this. This metric is: the distance from the edge below which 90% of the infected Hw trees occur, averaged across the three transects at a site
reg.infper <- reg.hw %>% filter(hdm_pa == "Y") %>% group_by(id_bec_age_f, plot_id) %>%
summarise(reg.infper = quantile(dist_y_h, probs = 0.9)) %>%
complete(plot_id, fill=list(reg.infper=0)) #get infection perimeter for each transect
View(reg.infper)
####Read in data and inspect it
##Dataset 1: site data.
#This contains variables at the site level. The key pieces for analysis are: year harvested and CWH subzone
site <- read_csv("data/cleaned/site data.csv")
str(site)
summary(site)
##Create some variables to use in summary tables and figures
#Calculate approximate age of regen. Sites assessed in 2023 so age = 2023 - year harvested
site <- site %>% mutate(age = 2023-yr_har)
site$age #luckily, got pretty good spread
#Create a single variable from all the pieces of a BEC zone
site <- site %>% unite(col = bec, sep = "", c("bec_z", "bec_sz", "bec_var"), remove = FALSE)
#Create a variable that combines site_id, bec, and regen age
site <- site %>% unite(col = id_bec_age_f, sep = ", ",
c("site_id", "bec", "age"),
remove = FALSE) %>%
mutate(id_bec_age_f = factor(id_bec_age_f))
#Make cluster, bec and id_bec_age_f factors
site <- site %>% mutate(across(c(cluster, bec, id_bec_age_f), ~as.factor(.)))
str(site)
##Dataset 2: tree data
#This contains data for each measured tree (mature and regen trees).
#Treats assessed_by var as a logical for some reason and throws up an error. Not a problem and not going to use this var
trees <- read_csv("data/workflow/trees_mapped.csv")
str(trees)
summary(trees)
#Convert factor vars to factors:
trees <- trees %>% mutate(across(
c(site_id, plot_id, spp, status, hdm_pa, b_lc,
broom_pa, broom_pos, stem_pa, crown_class, crown_cond, outside_10, assessed_by, tree_type, dmr_f),
~as.factor(.)))
#Convert dmrs to integers
trees <- trees %>% mutate(across(
c(dmr_l, dmr_m, dmr_u, dmr), ~as.integer(.)))
str(trees)
#Create new factor dmr variable that has fewer levels and ascends logically from healthy to most infected
levels(trees$dmr_f)
trees <- trees %>% mutate(dmr_f2 = case_when((dmr_f =="1" | dmr_f=="2") ~ "1-2", (dmr_f =="3" | dmr_f=="4") ~ "3-4", (dmr_f =="5" |
dmr_f=="6") ~ "5-6", .default = dmr_f))
trees <- trees %>% mutate(dmr_f2 = factor(dmr_f2, levels = c("-", "DU", "0","IBLC", "1-2", "3-4", "5-6", "DI")))
summary(trees$dmr_f2)
#Join some site level variables to tree data:
trees <- left_join(trees, select(site, cluster,
bec, id_bec_age_f, age, site_id), by="site_id")
#Create dataset of just Hw regen trees (our species of interest)
reg.hw <- trees %>% filter(tree_type == "regen" & spp=="Hw") #Hemlock regen trees
#Calculate the infection perimeter at each site
##Use the 90th percentile to do this. This metric is: the distance from the edge below which 90% of the infected Hw trees occur, averaged across the three transects at a site
reg.infper <- reg.hw %>% filter(hdm_pa == "Y") %>% group_by(id_bec_age_f, plot_id) %>%
summarise(reg.infper = quantile(dist_y_h, probs = 0.9)) %>%
complete(plot_id, fill=list(reg.infper=0)) #get infection perimeter for each transect
reg.infper <- reg.infper %>% group_by(id_bec_age_f) %>%
summarise(reg.infper_m = mean(reg.infper),
reg.infper_sd = sd(reg.infper))
View(reg.infper)
#Calculate the infection perimeter at each site
##Use the 90th percentile to do this. This metric is: the distance from the edge below which 90% of the infected Hw trees occur, averaged across the three transects at a site
reg.infper <- reg.hw %>% filter(hdm_pa == "Y") %>% group_by(id_bec_age_f, plot_id) %>%
summarise(reg.infper = quantile(dist_y_h, probs = 0.9)) %>%
complete(plot_id, fill=list(reg.infper=0)) #get infection perimeter for each transect
View(reg.infper)
#Convert plot_id and dmrs to integers
trees <- trees %>% mutate(across(
c(plot_id, dmr_l, dmr_m, dmr_u, dmr), ~as.integer(.)))
####Read in data and inspect it
##Dataset 1: site data.
#This contains variables at the site level. The key pieces for analysis are: year harvested and CWH subzone
site <- read_csv("data/cleaned/site data.csv")
str(site)
summary(site)
##Create some variables to use in summary tables and figures
#Calculate approximate age of regen. Sites assessed in 2023 so age = 2023 - year harvested
site <- site %>% mutate(age = 2023-yr_har)
site$age #luckily, got pretty good spread
#Create a single variable from all the pieces of a BEC zone
site <- site %>% unite(col = bec, sep = "", c("bec_z", "bec_sz", "bec_var"), remove = FALSE)
#Create a variable that combines site_id, bec, and regen age
site <- site %>% unite(col = id_bec_age_f, sep = ", ",
c("site_id", "bec", "age"),
remove = FALSE) %>%
mutate(id_bec_age_f = factor(id_bec_age_f))
#Make cluster, bec and id_bec_age_f factors
site <- site %>% mutate(across(c(cluster, bec, id_bec_age_f), ~as.factor(.)))
str(site)
##Dataset 2: tree data
#This contains data for each measured tree (mature and regen trees).
#Treats assessed_by var as a logical for some reason and throws up an error. Not a problem and not going to use this var
trees <- read_csv("data/workflow/trees_mapped.csv")
str(trees)
summary(trees)
#Convert factor vars to factors:
trees <- trees %>% mutate(across(
c(site_id, spp, status, hdm_pa, b_lc,
broom_pa, broom_pos, stem_pa, crown_class, crown_cond, outside_10, assessed_by, tree_type, dmr_f),
~as.factor(.)))
#Convert plot_id and dmrs to integers
trees <- trees %>% mutate(across(
c(plot_id, dmr_l, dmr_m, dmr_u, dmr), ~as.integer(.)))
str(trees)
#Create new factor dmr variable that has fewer levels and ascends logically from healthy to most infected
levels(trees$dmr_f)
trees <- trees %>% mutate(dmr_f2 = case_when((dmr_f =="1" | dmr_f=="2") ~ "1-2", (dmr_f =="3" | dmr_f=="4") ~ "3-4", (dmr_f =="5" |
dmr_f=="6") ~ "5-6", .default = dmr_f))
trees <- trees %>% mutate(dmr_f2 = factor(dmr_f2, levels = c("-", "DU", "0","IBLC", "1-2", "3-4", "5-6", "DI")))
summary(trees$dmr_f2)
#Join some site level variables to tree data:
trees <- left_join(trees, select(site, cluster,
bec, id_bec_age_f, age, site_id), by="site_id")
#spp colours Ba, Cw, Fd, Hw
colors_spp = c("burlywood1", "firebrick", "burlywood4", "dodgerblue")
#hdm_pa colours. Didn't include a colour for non-Hw trees because not creating any plots with them and this variable here.
levels(trees$hdm_pa)
colors_hdm_pa <- c("dodgerblue", "grey", "goldenrod1")
#dmr_f2 colours. Didn't include a colour for non-Hw trees because not creating any plots with them and this variable here.
levels(trees$dmr_f2)
colors_dmr_f2 = c("dodgerblue4", "dodgerblue", "khaki1", "khaki3", "goldenrod1", "goldenrod3", "hotpink")
####Read in climate data
#Data downloaded from ClimateBC (https://climatebc.ca/mapVersion, 24 Jun 2024). ClimateBCv7.50. Period: Normal_1991_2020
climate <- read_csv('./data/raw/hdm_climdata.csv') #raw data from climateBC
####Check coordinates were inputted correctly, then join site_ids
#Sites are identified by coordinates in the climate dataset. Check they are right before joining site_ids
site <- site %>% mutate(dd_X_r = round(dd_X, digits = 4), #round number of decimals to match climateBC rounding
dd_Y_r = round(dd_Y, digits = 5))
x <- site$dd_X_r - climate$long
y <- site$dd_Y_r - climate$Lat
print(x); print(y)
#Good, almost al 0s, just one that is different by 1 x 10e-4 (a rounding error)
#Join site_id, bec and cluster by latitude values
climate <- left_join(climate, select(site, site_id, cluster, bec, dd_Y_r), by = c("Lat" = "dd_Y_r"))
#move site_id to the front
climate <- climate %>% select(site_id, cluster, bec, everything())
#### Define climate variables that were in Bianca's paper
#Descriptions of these variables and whether they are exact matches or approximiations of variables used in paper are in: /Users/hannosoutham/Library/CloudStorage/OneDrive-UBC(1)/Msc/Thesis/ch1.docx
#1 Growing degree days
climate <- climate %>% rowwise() %>% mutate(DD5_gs = sum(c_across(DD5_sp:DD5_at)))
select(climate, DD5, DD5_gs)
#2 Growing season radians
climate <- climate %>% rowwise() %>% mutate(Rad_gs = mean(c_across(Rad_sp:Rad_at)))
select(climate, MAR, Rad_gs)
#3 Lowest average minimum monthly temperature (Tmin_wt)
# find lowest Tmin value across all months
climate <- climate %>% rowwise() %>% mutate(Tmin_all = min(c_across(Tmin_01:Tmin_12)))
select(climate, Tmin_wt, Tmin_all)
#4 Standard deviation of lowest average minimum monthly temperature
# calculate the standard deviation in Tmin across all of the months
climate <- climate %>% rowwise() %>% mutate(Tmin_sd = sd(c_across(Tmin_01:Tmin_12)))
select(climate, Tmin_sd)
#5 Snow (PAS)
select(climate, MAP, PAS)
#6 Rain
climate <- climate %>% mutate(PAR = MAP-PAS)
select(climate, MAP, PAR, PAS)
#7 Lowest average spring monthly temperature
# Find lowest Tmin value between May and June
climate <- climate %>% rowwise() %>% mutate(Tmin_mj = min(c_across(Tmin_05:Tmin_06)))
select(climate, Tmin_mj)
#8 Lowest average fall monthly temperature (Tmin_at)
# Find the lowest Tmin value between August and September
climate <- climate %>% rowwise() %>% mutate(Tmin_as = min(c_across(Tmin_08:Tmin_09)))
select(climate, Tmin_as)
####Create clean dataset
#Pull out the variables described above
#Also include MAT (mean annual temperature), TD (temperature difference between mean coldest month temperature and mean warmest month temperature) and MAP (mean annual precipitation) because they are good descriptors
climate <- climate %>%
select(site_id, cluster, bec, MAT, TD, MAP, PAR, PAS, DD5_gs, Rad_gs,
Tmin_all, Tmin_sd, Tmin_mj, Tmin_as) #select the varaibles of interest
print(climate)
#Export this as a table for thesis
# write_csv(climate, "./tables/site_climate.csv")
####Graph this
#Create a long dataframe so a variables can be plotted in one go
# clim_g <- climate %>%
#   pivot_longer(MAT:Tmin_as, names_to = "climvar", values_to = "climval")
#
# #Create a plot
# ggplot(clim_g, aes(x=cluster, y=climval, label=site_id, color = bec)) +
#   geom_text_repel() +
#   geom_point() +
#   facet_wrap(~climvar, scales = "free_y") +
#   theme_classic() +
#   theme(axis.text.x = element_text(angle = 90,
#                                    hjust = 1, vjust = 0.5)) +  # Rotate x-axis labels
#   scale_x_discrete(labels = function(x) str_replace_all(x, " ", "\n")) #add a line break wherever there is a space
#Calculate basal area for each tree in m^2 (m^2 is how its usually expressed at the tree level)
##https://en.wikipedia.org/wiki/Basal_area
trees <- trees %>% mutate(ba_m2 = pi*((dbh/100)/2)^2)
#Create bins of diameter classes from dbh
##Default is for intervals to be half-open. They include the upper bound but not the lower bound. e.g. (10,20] includes 20 but (20, 30] does not
## https://stackoverflow.com/questions/41304960/how-to-create-breaks-using-the-cut-function-without-numbers-overlapping
max(trees$dbh)
trees <- trees %>% mutate(dbh_bin = cut(dbh, breaks = c(0, 10, 20, 30, 40, 50, 60, 70, 80,
90, 100, 110, 120, 130, 140, 150,
160, 170, 180, 190, 200),
include.lowest = TRUE))
#Create dataset thats comparable between sites. Need to do two things:
##At a few sites we mapped mature trees up to 15m from the edge, when the standard was 10m. Need to remove extra trees mapped outside 10m.
##Regen transects are variable length. Filter to just trees within 15m (the shortest transect) so that we are comparing the same transect footprint at each site
trees_comp <- trees %>% filter(outside_10 =="N" | is.na(outside_10)) %>%
filter(dist_y_h<=15 | is.na(dist_y_h))
#Subdivide data into mature and regen components
##Mature
mature_comp <- trees_comp %>% filter(tree_type=="mature") #mature trees
##Regen
regen_15 <- trees_comp %>% filter(tree_type == "regen") #regen trees
#Calculate some basic site level metrics: basal area, number of stems
##Regen
##Regen transect footprint = 15x5m=75m2=0.0075ha (but three transects/site) so 0.0075*3 = 0.0225ha
reg.ba_nstem <- regen_15 %>% group_by(id_bec_age_f) %>%
summarise(reg.tot_ba_m2 = sum(ba_m2),  reg.nstem = n()) #calculate total BA and number of stems
reg.ba_nstem <- reg.ba_nstem %>% mutate(reg.tot_ba_m2ha = reg.tot_ba_m2/0.0225,
reg.nstem_ha = reg.nstem/0.0225) #Add a columns with per hectare numbers for easy reading
##Mature
##Mature component footprint = 55x10m =550m2=0.055ha.
mat.ba_nstem <- mature_comp %>% group_by(id_bec_age_f) %>%
summarise(mat.tot_ba_m2 = sum(ba_m2),  mat.nstem = n()) #calculate total BA and number of stems
mat.ba_nstem <- mat.ba_nstem %>% mutate(mat.tot_ba_m2ha = mat.tot_ba_m2/0.055,
mat.nstem_ha = mat.nstem/0.055) #Add a columns with per hectare numbers for easy reading
#Join these to site table
site <- left_join(site, reg.ba_nstem, by="id_bec_age_f")
site <- left_join(site, mat.ba_nstem, by="id_bec_age_f")
#Create a summary table, see how they compare:
site %>% select(id_bec_age_f, reg.tot_ba_m2ha, reg.nstem_ha) %>%
arrange(reg.tot_ba_m2ha)
site %>% select(id_bec_age_f, mat.tot_ba_m2ha, mat.nstem_ha) %>%
arrange(mat.tot_ba_m2ha)
####################
#Create a summary of dbh at each site
##Calculate the 25th percentile, median and 75th percentile
reg.dbh <- regen_15 %>% group_by(id_bec_age_f) %>%
summarise(reg.dbh_25perc = quantile(dbh, probs = .25),
reg.dbh_med = quantile(dbh, probs = .50),
reg.dbh_75perc = quantile(dbh, probs = .75)) #calculate total BA and number of
mat.dbh <- mature_comp %>% group_by(id_bec_age_f) %>%
summarise(mat.dbh_25perc = quantile(dbh, probs = .25),
mat.dbh_med = quantile(dbh, probs = .50),
mat.dbh_75perc = quantile(dbh, probs = .75)) #calculate total BA and number of
#Do the same but just for Hw
reg.hw_dbh <- regen_15 %>% filter(spp=="Hw") %>% group_by(id_bec_age_f) %>%
summarise(reg.dbh_hw_25perc = quantile(dbh, probs = .25),
reg.dbh_hw_med = quantile(dbh, probs = .50),
reg.dbh_hw_75perc = quantile(dbh, probs = .75)) #calculate total BA and number of
mat.hw_dbh <- mature_comp %>% filter(spp=="Hw") %>% group_by(id_bec_age_f) %>%
summarise(mat.dbh_hw_25perc = quantile(dbh, probs = .25),
mat.dbh_hw_med = quantile(dbh, probs = .50),
mat.dbh_hw_75perc = quantile(dbh, probs = .75)) #calculate total BA and number of
#Join these back to the site dataframe
site <- left_join(site, reg.dbh, by="id_bec_age_f")
site <- left_join(site, mat.dbh, by="id_bec_age_f")
site <- left_join(site, reg.hw_dbh, by="id_bec_age_f")
site <- left_join(site, mat.hw_dbh, by="id_bec_age_f")
####################
#Now break down basal area and nstem, by species and diameter class.
##Bit of a messy table, but graphed below
reg.struc <- regen_15 %>% group_by(id_bec_age_f, spp, dbh_bin) %>%
summarise(ba_m2 = sum(ba_m2), nstem = n()) %>%
complete(dbh_bin, fill=list(ba_m2=0, nstem=0)) #add 0s in places there was no trees
mat.struc <- mature_comp %>% group_by(id_bec_age_f, spp, dbh_bin) %>%
summarise(ba_m2 = sum(ba_m2), nstem = n()) %>%
complete(dbh_bin, fill=list(ba_m2=0, nstem=0))#add 0s in places there was no trees
#Filter to the four dominant conifer species (hemlock (Hw) cedar (Cw), douglas fir (Fd) and amabilis fir (Ba)) to make comparisons easier.
##First check what percentage of the BA and # of stems Hw, Cw, Fd and Ba make up together (also add Hw alone because its focal species)
###Regen
reg.hwcwfdba_ba_m2 <- reg.struc %>% filter(spp %in% c("Hw", "Cw", "Fd", "Ba")) %>% group_by(id_bec_age_f) %>%
summarise(reg.hwcwfdba_ba_m2 = sum(ba_m2)) #calculate total BA of Hw, Cw, Fd and Ba at each site
reg.hwcwfdba_nstem <- reg.struc %>% filter(spp %in% c("Hw", "Cw", "Fd", "Ba")) %>% group_by(id_bec_age_f) %>%
summarise(reg.hwcwfdba_nstem = sum(nstem)) #calculate total # of stems of Hw, Cw, Fd and Ba at each site
reg.hw_ba_m2 <- reg.struc %>% filter(spp == "Hw") %>% group_by(id_bec_age_f) %>%
summarise(reg.hw_ba_m2 = sum(ba_m2)) #calculate BA of Hw at each site
reg.hw_nstem <- reg.struc %>% filter(spp == "Hw") %>% group_by(id_bec_age_f) %>%
summarise(reg.hw_nstem = sum(nstem)) #calculate number of Hw trees at each site
###Join variables back to site data
site <- left_join(site, reg.hwcwfdba_ba_m2, by="id_bec_age_f")
site <- left_join(site, reg.hwcwfdba_nstem, by="id_bec_age_f")
site <- left_join(site, reg.hw_ba_m2, by="id_bec_age_f")
site <- left_join(site, reg.hw_nstem, by="id_bec_age_f")
site <- site %>% mutate(reg.p_ba_hwcwfdba = reg.hwcwfdba_ba_m2/reg.tot_ba_m2, #proportion BA Hw, Fd, Cw Ba
reg.p_stem_hwcwfdba = reg.hwcwfdba_nstem/reg.nstem, #proportion stems Hw, Fd, Cw Ba
reg.p_ba_hw = reg.hw_ba_m2/reg.tot_ba_m2, #proportion BA Hw
reg.p_stem_hw = reg.hw_nstem/reg.nstem) #proportion stems Hw
###Mature
mat.hwcwfdba_ba_m2 <- mat.struc %>% filter(spp %in% c("Hw", "Cw", "Fd", "Ba")) %>% group_by(id_bec_age_f) %>%
summarise(mat.hwcwfdba_ba_m2 = sum(ba_m2)) #calculate total BA of just Hw, Cw, Fd and Ba
mat.hwcwfdba_nstem <- mat.struc %>% filter(spp %in% c("Hw", "Cw", "Fd", "Ba")) %>% group_by(id_bec_age_f) %>%
summarise(mat.hwcwfdba_nstem = sum(nstem)) #calculate total # of stems of Hw, Cw, Fd and Ba at each site
mat.hw_ba_m2 <- mat.struc %>% filter(spp == "Hw") %>% group_by(id_bec_age_f) %>%
summarise(mat.hw_ba_m2 = sum(ba_m2)) #calculate BA of Hw
mat.hw_nstem <- mat.struc %>% filter(spp == "Hw") %>% group_by(id_bec_age_f) %>%
summarise(mat.hw_nstem = sum(nstem)) #calculate number of Hw trees at each site
###Join variables back to site data
site <- left_join(site, mat.hwcwfdba_ba_m2, by="id_bec_age_f")
site <- left_join(site, mat.hwcwfdba_nstem, by="id_bec_age_f")
site <- left_join(site, mat.hw_ba_m2, by="id_bec_age_f")
site <- left_join(site, mat.hw_nstem, by="id_bec_age_f")
site <- site %>% mutate(mat.p_ba_hwcwfdba = mat.hwcwfdba_ba_m2/mat.tot_ba_m2, #proportion BA Hw, Fd, Cw Ba
mat.p_stem_hwcwfdba = mat.hwcwfdba_nstem/mat.nstem, #proportion stems Hw, Fd, Cw Ba
mat.p_ba_hw = mat.hw_ba_m2/mat.tot_ba_m2, #proportion BA Hw
mat.p_stem_hw = mat.hw_nstem/mat.nstem) #proportion stems Hw
##Create summary table. Hw, Cw, Fd and Ba make up between 78-100% of regen basal area, and 88-100% of mature basal area. So only visualizing them seems reasonable.
## Hw makes up between 12 and 95% in regen and between 10% and 97% in mature component. Two Ucluelet sites (ph_2 and ph_3) are outliers, with low Hw percentages. Spread of Hw percentage more continuous in mature; in regen, most sites have >70% Hw and only ph_2 and ph_3 are <50%.
site %>% select(id_bec_age_f, reg.tot_ba_m2, reg.hwcwfdba_ba_m2, reg.hw_ba_m2, reg.p_ba_hwcwfdba, reg.p_ba_hw) %>%
arrange(reg.tot_ba_m2)
site %>% select(id_bec_age_f, mat.tot_ba_m2, mat.hwcwfdba_ba_m2, mat.hw_ba_m2, mat.p_ba_hwcwfdba, mat.p_ba_hw) %>%
arrange(mat.tot_ba_m2)
##Filter
reg.struc <- filter(reg.struc, spp %in% c("Hw", "Cw", "Fd", "Ba"))
mat.struc <- filter(mat.struc, spp %in% c("Hw", "Cw", "Fd", "Ba"))
#Make some plots:
levels(reg.struc$spp)
##Regen
# reg.struc <- reg.struc %>% filter(ba_m2>0) #Remove rows with 0 because R will plot all dbh intervals (up to 180cm)
# ggplot(reg.struc, aes(x=dbh_bin, y=nstem, fill=spp)) + geom_bar(position="stack", stat="identity") +
#   facet_wrap(vars(id_bec_age_f)) + scale_fill_manual(values = colors_spp)
# ggplot(reg.struc, aes(x=dbh_bin, y=ba_m2, fill=spp)) + geom_bar(position="stack", stat="identity") +
#   facet_wrap(vars(id_bec_age_f)) + scale_fill_manual(values = colors_spp)
##Mature
# mat.struc <- mat.struc %>% filter(ba_m2>0) #Remove rows with 0 because R will plot all dbh intervals (up to 180cm)
# ggplot(mat.struc, aes(x=dbh_bin, y=nstem, fill=spp)) + geom_bar(position="stack", stat="identity") +
#   facet_wrap(vars(id_bec_age_f)) + scale_fill_manual(values = colors_spp)
# ggplot(mat.struc, aes(x=dbh_bin, y=ba_m2, fill=spp)) + geom_bar(position="stack", stat="identity") +
#   facet_wrap(vars(id_bec_age_f)) + scale_fill_manual(values = colors_spp)
##############
#Assemble summary table for thesis
##Pull together variables
comp_size <-
select(
.data = site,
site_id,
reg.tot_ba_m2,
mat.tot_ba_m2,
reg.tot_ba_m2ha,
mat.tot_ba_m2ha,
reg.nstem,
mat.nstem,
reg.nstem_ha,
mat.nstem_ha,
reg.hw_ba_m2,
mat.hw_ba_m2,
reg.p_ba_hw,
mat.p_ba_hw,
reg.hw_nstem,
mat.hw_nstem,
reg.p_stem_hw,
mat.p_stem_hw,
reg.dbh_25perc,
mat.dbh_25perc,
reg.dbh_med,
mat.dbh_med,
reg.dbh_75perc,
mat.dbh_75perc,
reg.dbh_hw_25perc,
mat.dbh_hw_25perc,
reg.dbh_hw_med,
mat.dbh_hw_med,
reg.dbh_hw_75perc,
mat.dbh_hw_75perc
)
#Pivot the table longer so every measured variable has one column and two rows, one for mature trees and one for regen trees
comp_size <- comp_size %>% pivot_longer(cols = -site_id, names_to = c("tree_type", ".value"), names_sep = "\\.")
comp_size <- comp_size %>% mutate(tree_type = case_when(tree_type == "reg" ~ "regen", #recode tree_type
tree_type == "mat" ~ "mature"))
#Export table
#Export this as a table for thesis
# write_csv(comp_size, "./tables/comp_size.csv")
#Filter to just Hw and Ba trees because these are the only ones we are considering "significant hosts"
mat.hwba <- mature_comp %>% filter(spp %in% c("Hw", "Ba"))
mat.hwba_summary <- mat.hwba %>% group_by(id_bec_age_f) %>%
summarise(mat.hwba_ba_m2 = sum (ba_m2), mat.hwba_nstem = n()) #calculate summary statistics
site <- left_join(site, mat.hwba_summary, by="id_bec_age_f") #add summary stats back to site data
#Start simple and calculate the basal area and number of infected trees at each site
mat.inf <- mat.hwba %>% filter(hdm_pa =="Y") %>% group_by(id_bec_age_f) %>%
summarise(mat.inf_ba_m2 = sum(ba_m2), mat.inf_nstem = n()) #infected
site <- left_join(site, mat.inf, by="id_bec_age_f") #join variables back to site data
site <- site %>% mutate(mat.p_hwba_ba_inf = mat.inf_ba_m2/mat.hwba_ba_m2,
mat.p_hwba_nstem_inf = mat.inf_nstem/mat.hwba_nstem) #calculate the proportion of signifcant hosts (Hw and Ba) stems and basal area that are infected at each site
#Create a summary table.
site %>% select(id_bec_age_f, mat.tot_ba_m2, mat.hwba_ba_m2, mat.inf_ba_m2, mat.p_hwba_ba_inf) %>% #summary table sorted by proportion of BA infected
arrange(mat.p_hwba_ba_inf)
site %>% select(id_bec_age_f, mat.nstem, mat.hwba_nstem, mat.inf_nstem, mat.p_hwba_nstem_inf) %>% #summary table sorted by proportion of BA infected
arrange(mat.p_hwba_nstem_inf)
#Now calculate basal area and # of stems by dmr
mat.dmr <- mat.hwba %>% group_by(site_id, dmr_f2) %>% summarise(ba_m2 = sum(ba_m2), nstem =n()) %>%
complete(dmr_f2, fill=list(ba_m2=0, nstem=0))
mat.dmr <- mat.dmr %>% filter(dmr_f2 != "-")
mat.dmr <- pivot_wider(mat.dmr, names_from = dmr_f2, values_from = c(ba_m2, nstem))
#Create table for thesis
mat_infection <- site %>% select(site_id, mat.tot_ba_m2, mat.nstem, mat.inf_ba_m2, mat.inf_nstem, mat.p_hwba_ba_inf,
mat.p_hwba_nstem_inf)
mat_infection <- left_join(mat_infection, mat.dmr, by = "site_id")
#Export this for thesis
# write_csv(mat_infection, "./tables/mat_infection.csv")
#
# #Now graph infection and DMR across dbh distributions
# ##Break down basal area and # stems by site, presence/absece of hdm and diameter class
# mat.hdmpa_dbh <- mat.hwba %>% group_by(id_bec_age_f, hdm_pa, dbh_bin) %>%
#   summarise(ba_m2 = sum(ba_m2), nstem = n()) %>% complete(dbh_bin, fill=list(ba_m2=0, nstem=0))
#
# ##Graph this across diameter classes
# mat.hdmpa_dbh <- mat.hdmpa_dbh %>% filter(ba_m2>0) #Remove rows with 0 because R will plot all dbh intervals (up to 180cm)
# ggplot(mat.hdmpa_dbh, aes(x=dbh_bin, y=nstem, fill=hdm_pa)) + geom_bar(position="stack", stat="identity") +
#   facet_wrap(vars(id_bec_age_f)) + scale_fill_manual(values = colors_dmr_f2)
# ggplot(mat.hdmpa_dbh, aes(x=dbh_bin, y=ba_m2, fill=hdm_pa)) + geom_bar(position="stack", stat="identity") +
#   facet_wrap(vars(id_bec_age_f)) + scale_fill_manual(values = colors_dmr_f2)
#
# ##Do the same but by DMR
# mat.dmr_dbh <- mat.hwba %>% group_by(id_bec_age_f, dmr_f2, dbh_bin) %>%
#   summarise(ba_m2 = sum(ba_m2), nstem = n()) %>% complete(dbh_bin, fill=list(ba_m2=0, nstem=0))
#
# ##Graph this across diameter classes
# mat.dmr_dbh <- mat.dmr_dbh %>% filter(ba_m2>0) #Remove rows with 0 because R will plot all dbh intervals (up to 180cm)
# ggplot(mat.dmr_dbh, aes(x=dbh_bin, y=nstem, fill=dmr_f2)) + geom_bar(position="stack", stat="identity") +
#   facet_wrap(vars(id_bec_age_f)) + scale_fill_manual(values = colors_dmr_f2)
# ggplot(mat.dmr_dbh, aes(x=dbh_bin, y=ba_m2, fill=dmr_f2)) + geom_bar(position="stack", stat="identity") +
#   facet_wrap(vars(id_bec_age_f)) + scale_fill_manual(values = colors_dmr_f2)
#Create dataset of just Hw regen trees (our species of interest)
reg.hw <- trees %>% filter(tree_type == "regen" & spp=="Hw") #Hemlock regen trees
#Calculate the infection perimeter at each site
##Use the 90th percentile to do this. This metric is: the distance from the edge below which 90% of the infected Hw trees occur, averaged across the three transects at a site
reg.infper <- reg.hw %>% filter(hdm_pa == "Y") %>% group_by(id_bec_age_f, plot_id) %>%
summarise(reg.infper = quantile(dist_y_h, probs = 0.9)) %>%
complete(plot_id, fill=list(reg.infper=0)) #get infection perimeter for each transect
View(reg.infper)
#Calculate the infection perimeter at each site
##Use the 90th percentile to do this. This metric is: the distance from the edge below which 90% of the infected Hw trees occur, averaged across the three transects at a site
levels(reg.hw$plot_id)
#Calculate the infection perimeter at each site
##Use the 90th percentile to do this. This metric is: the distance from the edge below which 90% of the infected Hw trees occur, averaged across the three transects at a site
levels(as.factor(reg.hw$plot_id))
reg.infper <- reg.hw %>% group_by(id_bec_age_f, plot_id, hdm_pa) %>%
summarise(reg.infper = quantile(dist_y_h, probs = 0.9)) %>%
complete(plot_id, fill=list(reg.infper=0)) #get infection perimeter for each transect
#Create dataset of just Hw regen trees (our species of interest)
reg.hw <- trees %>% filter(tree_type == "regen" & spp=="Hw") #Hemlock regen trees
reg.infper <- reg.hw %>% group_by(id_bec_age_f, plot_id, hdm_pa) %>%
summarise(reg.infper = quantile(dist_y_h, probs = 0.9)) %>%
complete(plot_id, fill=list(reg.infper=0)) #get infection perimeter for each transect
reg.infper <- reg.hw %>% group_by(id_bec_age_f, plot_id, hdm_pa) %>%
summarise(reg.infper = quantile(dist_y_h, probs = 0.9)) %>%
complete(hdm_pa, fill=list(reg.infper=0)) #get infection perimeter for each transect
reg.infper <- reg.infper %>% filter(hdm_pa == "Y")
range(reg.infper$reg.infper)
range(reg.infper$reg.infper)
reg.infper <- reg.infper %>% group_by(id_bec_age_f) %>%
summarise(reg.infper_m = mean(reg.infper),
reg.infper_sd = sd(reg.infper))
View(trees)
