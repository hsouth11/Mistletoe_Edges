filter(hdm_pa =="Y") %>%
group_by(site_id) %>%
summarise(reg.ba_m2_ha_hw_inf_50 = sum(ba_m2*phf_site),
reg.nstem_ha_hw_inf_50 = sum(phf_site))
#Join these stats back to results dataframe
reg_i_all <- left_join(reg_i_all, reg.ba_nstem_inf_15, by="site_id")
reg_i_all <- left_join(reg_i_all, reg.ba_nstem_inf_50, by="site_id")
#Calculate the percent of Hw infected
reg_i_all <- reg_i_all %>%
mutate(reg.p_ba_m2_inf_15 = 100*reg.ba_m2_ha_hw_inf_15/reg.ba_m2_ha_hw_15,
reg.p_nstem_inf_15 = 100*reg.nstem_ha_hw_inf_15/reg.nstem_ha_hw_15,
reg.p_ba_m2_inf_50 = 100*reg.ba_m2_ha_hw_inf_50/reg.ba_m2_ha_hw_50,
reg.p_nstem_inf_50 = 100*reg.nstem_ha_hw_inf_50/reg.nstem_ha_hw_50)
#Take a look
#For 0-15m
reg_i_all %>% select(site_id, reg.ba_m2_ha_hw_15, reg.nstem_ha_hw_15,
reg.p_ba_m2_inf_15, reg.p_nstem_inf_15) %>%
arrange(reg.p_nstem_inf_15)
summary(reg_i_all$reg.p_nstem_inf_15)
#For 0-50m
reg_i_all %>% select(site_id, reg.ba_m2_ha_hw_50, reg.nstem_ha_hw_50,
reg.p_ba_m2_inf_50, reg.p_nstem_inf_50) %>%
arrange(reg.p_nstem_inf_50)
summary(reg_i_all$reg.p_nstem_inf_50)
# Chunk 40
#Now find the basal area and number of stems (per ha) in each dmr class
reg.dmr_15 <- reg.hw_15 %>%
group_by(site_id, dmr_f2) %>%
summarise(ba_m2_ha_15 = sum(ba_m2*phf_site),
nstem_ha_15 = sum(phf_site)) %>%
complete(dmr_f2, fill=list(ba_m2_ha = 0, nstem_ha = 0))
reg.dmr_15 <- reg.dmr_15 %>%
filter(dmr_f2 != "-")
reg.dmr_15 <- pivot_wider(reg.dmr_15, names_from = dmr_f2,
values_from = c(ba_m2_ha_15, nstem_ha_15))
reg.dmr_50 <- reg.hw_50 %>%
group_by(site_id, dmr_f2) %>%
summarise(ba_m2_ha_50 = sum(ba_m2*phf_site),
nstem_ha_50 = sum(phf_site)) %>%
complete(dmr_f2, fill=list(ba_m2_ha = 0, nstem_ha = 0))
reg.dmr_50 <- reg.dmr_50 %>%
filter(dmr_f2 != "-")
reg.dmr_50 <- pivot_wider(reg.dmr_50, names_from = dmr_f2,
values_from = c(ba_m2_ha_50, nstem_ha_50))
#Add these to results dataframe
reg_i_all <- left_join(reg_i_all, reg.dmr_15, by = "site_id")
reg_i_all <- left_join(reg_i_all, reg.dmr_50, by = "site_id")
# Chunk 41
#Break distance from the edge into 5m bins
reg.hw_50 <- reg.hw_50 %>%
mutate(dist_y_h_bin = cut(dist_y_h,
breaks = c(0, 5, 10, 15, 20, 25, 30, 35, 40, 45,
50),
include.lowest = TRUE))
reg.hw_50$dist_y_h_bin
#Do the breakdown
reg.dmr_disty <- reg.hw_50 %>%
group_by(site_id, dmr_f2, dist_y_h_bin) %>%
summarise(ba_m2_ha = sum(ba_m2*phf_site),
nstem_ha = sum(phf_site)) %>%
complete(dist_y_h_bin, fill=list(ba_m2_ha = 0, nstem_ha = 0))
# Chunk 42
#Create data identifying the last interval with measured data at each site
#With help from ChatGPT
sim_lab <- reg.hw_50 %>%
filter(tree_type_2 == "meas regen") %>%  # Keep only "meas regen" trees
group_by(site_id) %>%  # Group by site
slice_max(dist_y_h, n = 1, with_ties = FALSE) %>%  # Get the row with max dist_y_h per site
select(site_id, dist_y_h_bin)  # Select relevant columns
#Get the total bar height for a graph using number of stems and a graph using
#BA. We will use this to define the y - coordinate for the marker
x <- reg.dmr_disty %>%
group_by(site_id, dist_y_h_bin) %>%
summarise(lab_pos_ba = sum(ba_m2_ha),
lab_pos_nstem = sum(nstem_ha))
#Join this to the plotting dataframe
sim_lab <- left_join(sim_lab, x,
by = c("site_id", "dist_y_h_bin"))
# Chunk 43
#By BA
p <- ggplot(reg.dmr_disty, aes(x=dist_y_h_bin, y=ba_m2_ha, fill=dmr_f2)) +
geom_bar(position=position_stack(reverse = TRUE), stat="identity") +
geom_text(data = sim_lab, aes(y = lab_pos_ba, label = "s", vjust = 0.1,
fill = NULL)) +
theme_classic() +
facet_wrap(vars(site_id)) +
scale_fill_manual(values = colors_dmr_f2,
labels = c("Dead uninfected", "0",
"Infected below \nlive crown",
"1-2",
"3-4",
"5-6",
"Dead uninfected")) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5),
legend.position = c(0.88, 0.01),
legend.background = element_rect(fill = "lightgrey"),
legend.key = element_rect(fill = "lightgrey", color = NA),
legend.title = element_text(size = 20),
legend.text = element_text(size = 16),
axis.text = element_text(size = 16),
axis.title = element_text(size = 20),
strip.text = element_text(size = 20)) +
labs(x = "Distance from edge (m)",
y = expression("Basal area (m"^2*") per ha"),
fill = "Adapted DMR") +
guides(fill = guide_legend(ncol = 1))
#Export this plot
# pdf(here("./figures/reg_dmr_disty_ba.pdf"), width = 11, height = 8.5)
# p
# dev.off()
#By # of stems
p <- ggplot(reg.dmr_disty, aes(x=dist_y_h_bin, y=nstem_ha, fill=dmr_f2)) +
geom_bar(position=position_stack(reverse = TRUE), stat="identity") +
geom_text(data = sim_lab, aes(y = lab_pos_nstem, label = "s",
vjust = -.5, fill = NULL),
size = 4, family = "Times New Roman") +
theme_classic() +
facet_wrap(vars(site_id)) +
scale_fill_manual(values = colors_dmr_f2) +
ylim(0, 800) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5),
legend.position = c(0.88, 0.05),
legend.background = element_rect(fill = "lightgrey"),
legend.key = element_rect(fill = "lightgrey", color = NA),
legend.title = element_text(size = 11, family = "Times New Roman",
face = "bold"),
legend.text = element_text(size = 11, family = "Times New Roman"),
axis.text = element_text(size = 10, family = "Times New Roman"),
axis.title = element_text(size = 11, family = "Times New Roman",
face = "bold"),
strip.text = element_text(size = 11, family = "Times New Roman",
margin = margin(0.05, 0.05,
0.05, 0.05, "cm"))) +
labs(x = "Distance from edge (m)",
y = "Trees per ha",
fill = "HDM infection") +
guides(fill = guide_legend(ncol = 2))
#Export this plot
# ggsave(here("./figures/reg_dmr_disty_nstem.svg"), plot = p, device = "svg",
#        width = 6.5, height = 5, units = "in")
# Chunk 44
regen_15_l <- regen_15 %>%
filter(spp == "Hw" & status %in% live_stat &
sim_tree == "N")
regen_50_l <- regen_50 %>%
filter(spp == "Hw" & status %in% live_stat)
# Chunk 45
#Calcualte summary metrics at the site level broken down by crown class
#For 0 - 15m
x <- regen_15_l %>%
group_by(site_id, crown_class_2) %>%
summarise(nstem_ha_l_hw = sum(phf_site),
nstem_ha_l_hw_inf = sum(phf_site[hdm_pa=="Y"]),
hw_s_dmr = mean(dmr),
hw_s_dmi = if_else(length(dmr[dmr>=1]) > 0,
mean(dmr[dmr>=1]),
NA),
nstem_ha_l_hw_wb = sum(phf_site[broom_pa == "Y"]),
nstem_ha_l_hw_si = sum(phf_site[stem_pa == "Y"]),
nstem_ha_l_hw_dmr3 = sum(phf_site[dmr >= 3])) %>%
mutate(p_l_hw_inf = 100*nstem_ha_l_hw_inf/nstem_ha_l_hw,
p_l_hw_wb = 100*nstem_ha_l_hw_wb/nstem_ha_l_hw,
p_l_hw_si = 100*nstem_ha_l_hw_si/nstem_ha_l_hw,
p_l_hw_dmr3= 100*nstem_ha_l_hw_dmr3/nstem_ha_l_hw) %>%
select(-c(nstem_ha_l_hw, nstem_ha_l_hw_inf, nstem_ha_l_hw_wb,
nstem_ha_l_hw_si, nstem_ha_l_hw_dmr3)) %>%
mutate(sec = "0_15")
#For 0-50m
x1 <- regen_50_l %>%
group_by(site_id, crown_class_2) %>%
summarise(nstem_ha_l_hw = sum(phf_site),
nstem_ha_l_hw_inf = sum(phf_site[hdm_pa=="Y"]),
hw_s_dmr = mean(dmr),
hw_s_dmi = if_else(length(dmr[dmr>=1]) > 0,
mean(dmr[dmr>=1]),
NA),
nstem_ha_l_hw_wb = sum(phf_site[broom_pa == "Y"]),
nstem_ha_l_hw_si = sum(phf_site[stem_pa == "Y"]),
nstem_ha_l_hw_dmr3 = sum(phf_site[dmr >= 3])) %>%
mutate(p_l_hw_inf = 100*nstem_ha_l_hw_inf/nstem_ha_l_hw,
p_l_hw_wb = 100*nstem_ha_l_hw_wb/nstem_ha_l_hw,
p_l_hw_si = 100*nstem_ha_l_hw_si/nstem_ha_l_hw,
p_l_hw_dmr3= 100*nstem_ha_l_hw_dmr3/nstem_ha_l_hw) %>%
select(-c(nstem_ha_l_hw, nstem_ha_l_hw_inf, nstem_ha_l_hw_wb,
nstem_ha_l_hw_si, nstem_ha_l_hw_dmr3)) %>%
mutate(sec = "0_50")
#Do the same thing but ignoring crown class
#Calculate each variable at the site level
#For 0-15m
x2 <- regen_15_l %>%
group_by(site_id) %>%
summarise(nstem_ha_l_hw = sum(phf_site),
nstem_ha_l_hw_inf = sum(phf_site[hdm_pa=="Y"]),
hw_s_dmr = mean(dmr),
hw_s_dmi = if_else(length(dmr[dmr>=1]) > 0,
mean(dmr[dmr>=1]),
NA),
nstem_ha_l_hw_wb = sum(phf_site[broom_pa == "Y"]),
nstem_ha_l_hw_si = sum(phf_site[stem_pa == "Y"]),
nstem_ha_l_hw_dmr3 = sum(phf_site[dmr >= 3])) %>%
mutate(p_l_hw_inf = 100*nstem_ha_l_hw_inf/nstem_ha_l_hw,
p_l_hw_wb = 100*nstem_ha_l_hw_wb/nstem_ha_l_hw,
p_l_hw_si = 100*nstem_ha_l_hw_si/nstem_ha_l_hw,
p_l_hw_dmr3= 100*nstem_ha_l_hw_dmr3/nstem_ha_l_hw) %>%
select(-c(nstem_ha_l_hw, nstem_ha_l_hw_inf,
nstem_ha_l_hw_wb, nstem_ha_l_hw_si, nstem_ha_l_hw_dmr3)) %>%
mutate(crown_class_2 = "all", sec = "0_15")
#For 0-50m
x3 <- regen_50_l %>%
group_by(site_id) %>%
summarise(nstem_ha_l_hw = sum(phf_site),
nstem_ha_l_hw_inf = sum(phf_site[hdm_pa=="Y"]),
hw_s_dmr = mean(dmr),
hw_s_dmi = if_else(length(dmr[dmr>=1]) > 0,
mean(dmr[dmr>=1]),
NA),
nstem_ha_l_hw_wb = sum(phf_site[broom_pa == "Y"]),
nstem_ha_l_hw_si = sum(phf_site[stem_pa == "Y"]),
nstem_ha_l_hw_dmr3 = sum(phf_site[dmr >= 3])) %>%
mutate(p_l_hw_inf = 100*nstem_ha_l_hw_inf/nstem_ha_l_hw,
p_l_hw_wb = 100*nstem_ha_l_hw_wb/nstem_ha_l_hw,
p_l_hw_si = 100*nstem_ha_l_hw_si/nstem_ha_l_hw,
p_l_hw_dmr3= 100*nstem_ha_l_hw_dmr3/nstem_ha_l_hw) %>%
select(-c(nstem_ha_l_hw, nstem_ha_l_hw_inf,
nstem_ha_l_hw_wb, nstem_ha_l_hw_si, nstem_ha_l_hw_dmr3)) %>%
mutate(crown_class_2 = "all", sec = "0_50")
#Join the three dataframes
ri_l_hw <- rbind(x, x1, x2, x3)
#Get some summary stats
ri_l_hw %>% filter(sec == "0_15" & crown_class_2 == "C") %>% summary()
ri_l_hw %>% filter(sec == "0_50" & crown_class_2 == "C") %>% summary()
# Chunk 46
#How many are there?
#All within 15m
regen_hw_dmr3 <- regen %>%
filter(spp == "Hw" & status %in% live_stat & dmr >= 3 & crown_class_2 == "C")
dim(regen_hw_dmr3) #41
#Where are these trees relative to the edge?
#All within 15m
summary(regen_hw_dmr3$dist_y_h)
#Which sites have them?
unique(regen_hw_dmr3$site_id)
#What is there typical incidence?
x %>% filter(crown_class_2 == "C") %>%
select(p_l_hw_dmr3) %>% summary()
# Chunk 47
#Compare tables in mature and regen component to figure out what we need to
#do to align them
#Regen table has an extra column called "sec". Need to make a variable
#identifying three groups: mature, regen from 0-15m and regen from 0-50m
head(mat_i_l_hw)
head(ri_l_hw)
#Combine the tables
x <- ri_l_hw %>%
mutate(tree_group =paste0("regen_", sec)) %>%
select(-sec) %>%
mutate(tree_group = case_match(tree_group,
"regen_0_15" ~ "Regen 0-15 m",
"regen_0_50" ~ "Regen 0-50 m"))
x1 <- mat_i_l_hw %>%
mutate(tree_group = "Mature")
x2 <- rbind(x, x1)
#Filter the table above to the co-dominant tree layer
x2 <- x2 %>%
filter(crown_class_2 == "C")
#Create a variable grouping the infection metrics by their measurement scale
#Two scales: metrics based on incidence (%) and those based on DMR
#Lengthen the dataset
x2 <- x2 %>%
pivot_longer(cols = where(is.numeric),
names_to = "metric",
values_to = "value") %>%
mutate(metric_group = if_else(str_detect(metric, "p"), "Incidence (%)",
"DMR"))
#Rename and order variables so they are legible and display in specific order
#in the plot
unique(x2$metric)
x2 <- x2 %>%
mutate(metric = case_match(metric,
"hw_s_dmr" ~ "Average DMR",
"hw_s_dmi" ~ "DMI",
"p_l_hw_inf" ~ "Incidence",
"p_l_hw_wb" ~ "Brooming incidence",
"p_l_hw_si" ~ "Stem infection incidence",
"p_l_hw_dmr3" ~ "DMR ≥3 incidence")) %>%
mutate(metric = factor(metric, levels = c("Incidence",
"DMR ≥3 incidence",
"Brooming incidence",
"Stem infection incidence",
"Average DMR",
"DMI")),
metric_group = factor(metric_group, levels = c("Incidence (%)",
"DMR")))
#Subset dataframe to metrics that are incidence based and dmr based
x3 <- x2 %>%
filter(metric_group == "Incidence (%)")
x4 <- x2 %>%
filter(metric_group == "DMR")
#Define some colours
colors_tree_group <- c("#a6611a", "#018571", "#80cdc1")
#Plot
p1 <- ggplot(x3, aes(x = metric, y = value, shape = tree_group,
colour = tree_group)) +
geom_point(position = position_dodge(width = 0.75)) +
geom_boxplot(outliers = F, fill = NA,
show.legend = F) +
theme_classic() +
scale_color_manual(values = colors_tree_group) +
labs(x = "Infection metric",
y = "%",
shape = "Tree group",
color = "Tree group") +
theme(axis.text.x = element_text(angle = 35, hjust=1, size = 11,
family = "Times New Roman",
colour = "black"),
axis.text.y = element_text(size = 11,
family = "Times New Roman",
colour = "black"),
strip.text = element_text(size = 11, family = "Times New Roman"),
axis.title = element_text(size = 11, family = "Times New Roman",
face = "bold"),
legend.text = element_text(size = 11, family = "Times New Roman"),
legend.title = element_text(size = 11, family = "Times New Roman",
face = "bold"),
legend.position = "bottom",
plot.margin = unit(c(0.1, 0.1, 0.1, 0.5), units = "cm"))
p2 <- ggplot(x4, aes(x = metric, y = value, shape = tree_group,
colour = tree_group)) +
geom_point(position = position_dodge(width = 0.75)) +
geom_boxplot(outliers = F, fill = NA,
show.legend = F) +
lims(y = c(0, 6)) +
theme_classic() +
scale_color_manual(values = colors_tree_group) +
labs(x = NULL,
y = "DMR scale",
shape = "Tree group",
color = "Tree group") +
theme(axis.text.x = element_text(angle = 35, hjust=1, size = 11,
family = "Times New Roman",
colour = "black"),
axis.text.y = element_text(size = 11,
family = "Times New Roman"),
strip.text = element_text(size = 11, family = "Times New Roman"),
axis.title = element_text(size = 11, family = "Times New Roman",
face = "bold"),
legend.text = element_text(size = 11, family = "Times New Roman"),
legend.title = element_text(size = 11, family = "Times New Roman",
face = "bold"),
legend.position = "bottom",
plot.margin = unit(c(0.1, 0.1, 0.1, 0.5), units = "cm"))
p3 <- ggarrange(p1, p2, ncol = 2, common.legend = T, align = "h",
widths = c(1.7, 1), labels = "AUTO", vjust = 1.2,
hjust = -0.1, font.label = list(size = 13,
family = "Times New Roman",
face = "bold"),
legend = "top")
#Save
# ggsave(here("./figures/inf_metrics.svg"), plot = p3, device = "svg",
#        width = 6.5, height = 4, units = "in")
# Chunk 48
#Rename two intervals in regenerating component for legend
#Filter to dominant/codominant crown class
x <- ri_l_hw %>%
mutate(sec = case_match(sec,
"0_15" ~ "Regen 0-15 m",
"0_50" ~ "Regen 0-50 m")) %>%
filter(crown_class_2 == "C")
#Create a variable grouping the infection metrics by their measurement scale
#Two scales: metrics based on incidence (%) and those based on DMR
#Lengthen the dataset
x <- x %>%
pivot_longer(cols = where(is.numeric),
names_to = "metric",
values_to = "value") %>%
mutate(metric_group = if_else(str_detect(metric, "p"), "Incidence (%)",
"DMR"))
#Rename and order variables so they are legible and display in specific order
#in the plot
unique(x$metric)
x <- x %>%
mutate(metric = case_match(metric,
"hw_s_dmr" ~ "Average DMR",
"hw_s_dmi" ~ "DMI",
"p_l_hw_inf" ~ "Incidence",
"p_l_hw_wb" ~ "Brooming incidence",
"p_l_hw_si" ~ "Stem infection incidence",
"p_l_hw_dmr3" ~ "DMR ≥3 incidence")) %>%
mutate(metric = factor(metric, levels = c("Incidence",
"DMR ≥3 incidence",
"Brooming incidence",
"Stem infection incidence",
"Average DMR",
"DMI")),
metric_group = factor(metric_group, levels = c("Incidence (%)",
"DMR")))
#Subset dataframe to metrics that are incidence based and dmr based
#Filter out incidence of brooming and stem infections
x1 <- x %>%
filter(metric_group == "Incidence (%)" & metric %in% c("Incidence",
"DMR ≥3 incidence"))
x2 <- x %>%
filter(metric_group == "DMR")
#These are the colours used for full plot with mature, regen 0-15 m and regen
#0-50 m plot. We will just use two blue colours here
c("#a6611a", "#018571", "#80cdc1")
colors_reg_sec <- c("#018571", "#80cdc1")
#Plot
p1 <- ggplot(x1, aes(x = metric, y = value, shape = sec,
colour = sec)) +
geom_point(position = position_dodge(width = 0.75)) +
geom_boxplot(outliers = F, fill = NA,
show.legend = F) +
theme_classic() +
scale_color_manual(values = colors_reg_sec) +
labs(x = "Infection metric",
y = "%",
shape = "Tree group",
color = "Tree group") +
theme(axis.text.x = element_text(angle = 35, hjust=1, size = 11,
family = "Times New Roman",
colour = "black"),
axis.text.y = element_text(size = 11,
family = "Times New Roman",
colour = "black"),
strip.text = element_text(size = 11, family = "Times New Roman"),
axis.title = element_text(size = 11, family = "Times New Roman",
face = "bold"),
legend.text = element_text(size = 11, family = "Times New Roman"),
legend.title = element_text(size = 11, family = "Times New Roman",
face = "bold"),
legend.position = "top",
plot.margin = unit(c(0.1, 0.1, 0.1, 0.5), units = "cm"))
p2 <- ggplot(x2, aes(x = metric, y = value, shape = sec,
colour = sec)) +
geom_point(position = position_dodge(width = 0.75)) +
geom_boxplot(outliers = F, fill = NA,
show.legend = F) +
lims(y = c(0, 6)) +
theme_classic() +
scale_color_manual(values = colors_reg_sec) +
labs(x = NULL,
y = "DMR scale",
shape = "Tree group",
color = "Tree group") +
theme(axis.text.x = element_text(angle = 35, hjust=1, size = 11,
family = "Times New Roman",
colour = "black"),
axis.text.y = element_text(size = 11,
family = "Times New Roman"),
strip.text = element_text(size = 11, family = "Times New Roman"),
axis.title = element_text(size = 11, family = "Times New Roman",
face = "bold"),
legend.text = element_text(size = 11, family = "Times New Roman"),
legend.title = element_text(size = 11, family = "Times New Roman",
face = "bold"),
legend.position = "top",
plot.margin = unit(c(0.1, 0.1, 0.1, 0.5), units = "cm"))
p3 <- ggarrange(p1, p2, ncol = 2, common.legend = T, align = "h",
widths = c(1, 1), labels = "AUTO", vjust = 1.2,
hjust = -0.1, font.label = list(size = 13,
family = "Times New Roman",
face = "bold"),
legend = "top")
p3
#Save
# ggsave(here("./figures/reg_inf_met_def.svg"), plot = p3, device = "svg",
#        width = 20, height = 15, units = "cm")
# Chunk 49
#Summarize across sites, grouping by interval and crown class
ri_l_hw_sum <- ri_l_hw %>%
group_by(sec, crown_class_2) %>%
summarise(across(where(is.numeric), list(
mean = ~mean(., na.rm = T),
median = ~median(., na.rm = T),
min = ~min(., na.rm = T),
max = ~max(., na.rm = T)
), .names = "{.col}_{.fn}")) %>%
mutate(crown_class_2 = if_else(crown_class_2 == "all", "All",
crown_class_2)) %>%
arrange(sec, crown_class_2)
#Sort rows and columns
names(ri_l_hw_sum)
ri_l_hw_sum <- ri_l_hw_sum %>%
mutate(crown_class_2 = if_else(crown_class_2 == "all", "All",
crown_class_2)) %>%
arrange(sec, crown_class_2) %>%
select(sec, crown_class_2, starts_with("p_l_hw_inf"),
starts_with("p_l_hw_dmr3"),
starts_with("p_l_hw_wb"), starts_with("p_l_hw_si"),
starts_with("hw_s_dmr"), starts_with("hw_s_dmi"))
#Export
# write_csv(ri_l_hw_sum, here("./tables/reg_inf_hw_live.csv"))
#Calcualte at the transect level first
#Used if_else statement because if there are no infected Hw, then infection
#perimeter is 0
reg.infper_tran <- regen %>%
mutate(resid = if_else(tree_id %in% resid_rm, "Y", "N")) %>%
filter(resid == "N" & tree_type_2 == "meas regen" &
spp == "Hw" & status %in% live_stat) %>%
group_by(site_id, plot_id) %>%
summarise(infper = if_else(sum(hdm_pa == "Y")>0,
quantile(dist_y_h[hdm_pa == "Y"], probs = 0.9),
0))
range(reg.infper_tran$infper)
#Average across transects to get site level estimate
reg.infper_site <- reg.infper_tran %>%
group_by(site_id) %>%
summarise(infper_mean = mean(infper),
infper_sd = sd(infper))
#Take a look
summary(reg.infper_site)
